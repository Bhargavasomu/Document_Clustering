Mining Frequent Patterns from Human
Interactions in Meetings Using Directed

Acyclic Graphs

Anna Fariha1, Chowdhury Farhan Ahmed1, Carson Kai-Sang Leung2,

S M Abdullah3, and Longbing Cao4

1 Dept. of Computer Science and Engineering,

University of Dhaka, Bangladesh

purpleblueanna@gmail.com, farhan@khu.ac.kr

2 Dept. of Computer Science, University of Manitoba, Canada

kleung@cs.umanitoba.ca

3 Dept. of Computer Science and Engineering,
United International University, Bangladesh

4 Faculty of Engineering and IT, University of Technology - Sydney, Australia

smab@cse.uiu.ac.bd

longbing.cao@uts.edu.au

Abstract. In modern life, interactions between human beings frequently
occur in meetings, where topics are discussed. Semantic knowledge of
meetings can be revealed by discovering interaction patterns from these
meetings. An existing method mines interaction patterns from meetings
using tree structures. However, such a tree-based method may not cap-
ture all kinds of triggering relations between interactions, and it may
not distinguish a participant of a certain rank from another participant
of a diﬀerent rank in a meeting. Hence, the tree-based method may not
be able to ﬁnd all interaction patterns such as those about correlated
interaction. In this paper, we propose to mine interaction patterns from
meetings using an alternative data structure—namely, a directed acyclic
graph (DAG). Speciﬁcally, a DAG captures both temporal and triggering
relations between interactions in meetings. Moreover, to distinguish one
participant of a certain rank from another, we assign weights to nodes
in the DAG. As such, a meeting can be modeled as a weighted DAG,
from which weighted frequent interaction patterns can be discovered. Ex-
perimental results showed the eﬀectiveness of our proposed DAG-based
method for mining interaction patterns from meetings.

Keywords: Data mining, Frequent patterns, Human interaction,
Modeling meetings, Directed Acyclic Graphs.

1

Introduction and Related Works

Meetings and human interactions are integral parts of workplace dynamics for
communicating between members participating in a meeting. During a meeting,
several kinds of human interactions may occur. Examples include (i) proposing

J. Pei et al. (Eds.): PAKDD 2013, Part I, LNAI 7818, pp. 38–49, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013

Mining Frequent Patterns from Human Interactions in Meetings Using DAGs

39

an idea, (ii) positively or negatively reacting to a proposal, (iii) acceptance of
a proposal. To gather signiﬁcant information regarding the success rate of the
decision made in a meeting, one can mine patterns from human interactions
occurred in the meeting.

Data mining is useful in discovering implicit, previously unknown, and po-
tentially valuable information or knowledge from large datasets. For instance,
frequent pattern mining [1,4,7] is helpful in ﬁnding frequently occurring patterns,
such as interaction patterns from meetings. The discovered interaction patterns
help to (i) estimate the eﬀectiveness of decisions made in meetings, (ii) designate
whether a meeting discussion is fruitful, (iii) compare two meeting discussions
using interaction ﬂow as a key feature [12] and (iv) index meetings for further
ease of access in database.

To acquire the semantic information from a meeting, researchers extracted
the meeting contents and represented them in a machine readable format. For
instance, Waibel et al. [9] presented a meeting browser that describes the dy-
namics of human interactions. McCowan et al. [5] recognized group actions in
meetings by modeling the joint behavior of participants and expressed group
actions as a two-layer process by a hidden Markov model framework. Otsuka et
al. [6] used gaze, head gestures, and utterances to determine who responds to
whom in multiparty face-to-face conversations. Yu et al. [11] proposed a mul-
timodal approach for interaction recognition; they [12] also used a tree-based
mining method to discover frequent patterns from human interactions occurred
in meetings. Such a method focuses mostly on capturing direct parent-child re-
lations. However, there are other triggering relations in meetings as illustrated
in Example 1.

Example 1. Let us consider a scenario about a meeting of four persons (e.g.,
professor A, assistant professor B, and two lecturers C & D) with diﬀerent
weights/ranks. At the beginning of the meeting, B proposes an idea which trig-
gers three interactions: (i) C expresses his negative opinion towards the proposed
idea, (ii) C asks D for opinion on the idea, and (iii) A expresses some positive
opinion towards the idea. Now, the interaction of C’s request for D’s opinion
triggers a single interaction performed by D. Although the response of D is
triggered by C’s request of opinion, such a response is generally inﬂuenced by
A’s positive opinion. To elaborate, D may initially feel negatively regarding B’s
proposed idea. But, after listening to A’s positive comments, B may change his
(cid:2)(cid:3)
mind and lean towards a neutral or even positive opinion.

Example 1 reveals that (i) an interaction can be triggered or inﬂuenced by multi-
ple interactions and (ii) the extent of inﬂuence can be signiﬁcantly dependent on
the weight/rank of the person triggering that interaction. However, the afore-
mentioned tree-based method [12] does not capture these triggering relations.
Moreover, as this method does not associate the actions with the rank of the
person causing the actions, it does not distinguish the same kinds of actions
performed by two persons having diﬀerent weights/ranks.

Observing that (i) directed acyclic graphs (DAGs) and trees are both spe-
cializations of graphs and (ii) trees may not capture all triggering relations or

40

A. Fariha et al.

person’s weight/rank, we explore the use of DAGs (as alternatives to trees) for
modeling meetings. As interactions occur in meetings ﬂow in only one direc-
tion with respect to time (i.e., no cycle), DAGs would be a logical choice for
modeling meetings. A key contribution of this paper is our DAG-based model-
ing of interactions occurred in meetings. In particular, DAGs capture two kinds
of relations: (i) temporal relations and (ii) triggering relations (cf. trees capture
temporal relations but not all triggering relations). By doing so, each interaction
is represented by a node in a DAG, and the label of the node indicates the class
of interaction. Moreover, every node is associated with a weight, indicating the
rank of the person who initiates the interaction.

Another key contribution of this paper is our DAG-based mining of weighted
frequent interaction patterns from meetings. Note that, Chen et al. [3] mined
DAG patterns from DAG databases. Termier et al. [8] presented DigDag as the
ﬁrst algorithm to mine closed frequent embedded sub-DAGs. Werth et al. [10]
designed and implemented a DAG miner for mining DAGs from DAG databases.
However, these related works do not consider weights of nodes in DAGs, let alone
mining weighted frequent interaction patterns. Furthermore, there exist related
works [2] that mine weighted frequent patterns from transactional databases (cf.
DAGs). Inspired by these works, we integrate DAG-based mining and interac-
tion pattern mining [10] with weighted frequent pattern mining [2] to form our
WDAGmeet algorithm for Weighted DAG-based meeting mining.

The rest of this paper is organized as follows. Section 2 introduces our DAG-
based representation of interaction ﬂow in meetings. Section 3 presents our
weighted DAG-based frequent interaction pattern mining. Evaluation results are
shown in Section 4, and conclusions are given in Section 5.

2 DAG-Based Representation of Interaction Flow

In this section, we introduce a DAG-based representation of interaction ﬂow in
decision-making meetings. Human interactions occurred in these meetings can
be mainly categorized into the following nine classes:

1. PRO: A participant proposes an idea.
2. ASK: A participant asks for opinion regarding a proposal.
3. POS: A participant expresses positive attitude towards a proposal.
4. NEG: A participant expresses negative attitude towards a proposal.
5. ACK: A participant agrees on some other’s comment, decision, or attitude.
6. COM: A participant comments on another action (PRO, ACK, POS, etc.).
7. REQ: A participant requests information regarding an issue.
8. ACC: A participant accepts the proposed idea.
9. REJ: A participant rejects the proposed idea.

When building a DAG to model the interaction ﬂow occurred in meetings, we label
each node in the DAG with one of the above nine classes of human interactions.
To further specify the rank of the person who initiated the interaction, we
assign a weight with value ranging from 1 to n inclusive (e.g., n=3, 4 or 5). Al-
though the same response can be made from diﬀerent persons of diﬀerent ranks,

Mining Frequent Patterns from Human Interactions in Meetings Using DAGs

41

Fig. 1. A DAG-based representation of interaction ﬂow showing triggering relations

a response from a person having a heavier weight usually strongly inﬂuences
the decision making process than that from a person of a lighter weight. Each
node in the weighted DAG in Fig. 1 denotes an instance of human interaction
occurred in a meeting. The label and weight of the nodes indicate the class of
the interaction and the corresponding impact factor, respectively.

So far, we have categorized interactions into nine classes (e.g., PRO, ASK)
based on the activities in a meeting. From the perspective of spontaneity, these
interactions can also be categorized into two types of interactions: (i) triggering
interaction and (ii) triggered interaction. For example, the PRO node in Fig. 1 re-
ﬂects a triggering interaction, which represents an assistant professor proposes an
idea spontaneously. The remaining nodes (POS, ASK & NEG) reﬂect three trig-
gered interactions, which occur in response to the triggering interaction. Directed
edges between nodes indicate triggering relations between the nodes, and the
arrows point from the triggering interaction to the triggered one. Consequently,
we generate a DAG-based interaction ﬂow diagram for modeling meetings.

Besides those triggering relations, our proposed DAG-based representation of
interaction ﬂow also captures temporal relations. To elaborate, a DAG repre-
sents the temporal relations by topological level. Nodes of a certain topological
level appear temporally before nodes of the next/lower level. Within the same
topological level, the node on the left appears temporally before the node on the
right. See Example 2.

Example 2. Fig. 2 shows a sample session of a meeting, in which an assistant
professor A proposes an idea. Triggered by A’s proposed idea, one of his col-
leagues B ﬁrst expresses her negative opinion and then asks others’ opinions.

Fig. 2. A DAG-based representation of interaction ﬂow showing both triggering rela-
tions and temporal relations in a meeting

42

A. Fariha et al.

On the other hand, a professor C (with heavier weight) expresses his positive
opinion on A’s idea. An associate professor D ﬁrst comments on B’s negative
opinions. Based on both his comments and B’s negative opinion, D then ex-
presses his negative opinion in response to B’s asking of opinion. Finally, based
on two negative opinion from assistant professor B and associate professor D
as well as the positive opinion from professor C, professor E accepts A’s idea,
biased to the interaction performed by person of higher rank. Note that, Fig. 2
captures not only single triggering relations but also interactions triggered by
(cid:2)(cid:3)
multiple triggering interactions.

3 DAG-Based Frequent Pattern Mining from Interaction

Flow DAGs

Once the DAG-based interaction ﬂow diagram is generated, we can mine frequent
interaction patterns (sub-DAG patterns) from the diagram. Before describing the
key steps in this interaction pattern mining process, let us consider the following
deﬁnitions.

Deﬁnition 1 (DAG-Based Interaction Flow). One single meeting may con-
sist of several sessions. Interaction ﬂow within each session can be represented

by a DAG D = (V, E), where V = {v1, v2, ..., vn} is a set of n vertices and
E = {e1, e2, ..., em} is a set of m directed edges. All DAGs are connected acyclic
graphs and no two DAGs, representing sessions of the same meeting, are con-
nected to each other. Each node vi is assigned a class label L(vi), where L(vi) ∈
{PRO, ASK, POS, NEG, ACK, COM, REQ, ACC, REJ}. Each node is asso-
ciated with a weight W (vi) that carries information regarding the (absolute or
relative) rank of a participant who initiates an interaction in a meeting. Each
edge is a directed connection between two vertices, i.e., E = {(vi, vj)|1 ≤ i, j ≤
n; vi, vj ∈ V }. Here, vi denotes the source/origin of the directed edge and vj
denotes the destination of that edge. An edge from vi to vj implies that vi (com-
pletely or partially) triggers vj . The levels of interactions can be determined
according to their topological orders. Interactions of higher levels occur earlier
than those of lower levels. Within the same level, interactions on the left occur
(cid:2)(cid:3)
earlier than those on the right.

i) = L(vi) and W (v(cid:3)

Deﬁnition 2 (Sub-DAG and Super-DAG). Consider two DAGs D = (V, E)
is a connected DAG; (ii) V (cid:3) ⊆ V ; (iii) E(cid:3) ⊆ E;
= (V (cid:3), E(cid:3)
and D(cid:3)
) such that (i) D(cid:3)
i) = W (vi) for a vi ∈ V ; (v) for
i ∈ V (cid:3), L(v(cid:3)
(iv) for each v(cid:3)
j ∈ V (cid:3)
j ) ∈ E(cid:3)
, these v(cid:3)
each e = (v(cid:3)
i, v(cid:3)
are mapped to the corresponding vi
& vj ∈ V . Then, D(cid:3)
is a sub-DAG of D. Equivalently, D is a super-DAG
(cid:2)(cid:3)
of D(cid:3)
Deﬁnition 3 (Support). Given (i) a sub-DAG D(cid:3)
support of D(cid:3)
is deﬁned by the following equation:

and (ii) a database DB, the

i & v(cid:3)

.

sup(D(cid:3)

) =

#superDAGs of D(cid:3)× avg weight of nodes in D(cid:3)
#DAGs in DB× max weight of nodes in DB

.

(1)

Mining Frequent Patterns from Human Interactions in Meetings Using DAGs

43

This deﬁnition of support allows us to discover sub-DAGs containing nodes that
are not too frequent but are associated with heavy weights. See Example 3.

Example 3. Consider a sample DAG D, consisting of 10 directed edges (i.e.,
10 triggering relations) on 20 nodes (i.e., 20 interactions): Professor A proposes
three ideas (PRO), and each of them are rejected (REJ) by Professor B. Lec-
turer C makes 7 comments (COM), and each of them triggers Lecturer F ’s
comments (COM). In other words, D = (V, E), where (i) V = {v1, ..., v20},
(ii) L(v1) = L(v3) = L(v5) = PRO, (iii) L(v2) = L(v4) = L(v6) = REJ,
(iv) L(v7) = ... = L(v20) = COM, (v) E = {(v1, v2), (v3, v4), ..., (v19, v20)},
(vi) W (v1) = ... = W (v6) = 5, and (vii) W (v7) = ... = W (v20) = 1. Here, the
frequency of the pattern “A proposes an idea, which is rejected by B” is 3; the
frequency of another pattern “C makes a comment, which is commented by F ”
is 7. Between them, the ﬁrst pattern is more interesting than the second one
because interactions between persons of higher rank (i.e., heavier weights) are
usually more important and useful in analyzing decision-making meetings even
(cid:2)(cid:3)
when the frequency of these interactions is not too high.

Deﬁnition 4 (Frequent Pattern or Fragment). Sub-DAGs, having support
greater than the user-speciﬁc minimum support threshold minsup are considered
(cid:2)(cid:3)
frequent sub-DAG pattern (or fragment).

Deﬁnition 5 (Mining Frequent Interaction Patterns
from Meeting
DB). Given (i) a meeting database DB capturing human interactions in meet-
ings, (ii) a user-speciﬁc minimum support threshold minsup, the problem of
mining frequent interaction patterns is to discover from DB every frequent in-
(cid:2)(cid:3)
teraction pattern, i.e., every sub-DAG D(cid:3)

having sup(D(cid:3)

) ≥ minsup.

Our proposed weighted DAG-based meeting mining algorithm (WDAGmeet)
discovers frequent interaction patterns in the form of frequent sub-DAGs from
weighted DAG database DB as follows. The algorithm ﬁrst generates a set of all
frequent nodes in DB. It then expands these nodes (i.e., singleton sub-DAGs)
using the following four expansion rules:

1. New Root: A new root (with no incoming edge) is inserted.
2. New Level: A new topological level is introduced with the insertion of a
new node into that level and the insertion of an edge from a node in the
previous topological level.

3. New Node: A new node (with a label lexicographically greater than the
last node in current topological level) is inserted into the current topological
level.

4. New Edge: A new edge from a previously inserted node to the most recently

inserted node is added.

See Example 4 for illustration of these rules. Note that, these rules are designed
in such a way that no duplicate DAG is generated. In the process of expansion
of already found frequent sub-DAGs, duplicate sub-DAGs may be generated.
Although these duplicates do not aﬀect the mining result, they certainly increase

44

A. Fariha et al.

Algorithm 1. WDAGmeet

1 begin
2

Input : (1) Meeting DB of DAG, (2) minsup threshold
Output: A set F of frequent DAG interaction patterns
F ← all the frequent nodes in all the DAGs in DB
tmpF ← F
while tmpF (cid:3)= ∅ do
tmp ← ∅
for f ∈ tmpF do

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

tmp ← tmp ∪ expandW ithRoots(DB, f, minsup)
tmp ← tmp ∪ expandW ithN ewLevel(DB, f, minsup)
tmp ← tmp ∪ expandW ithN ewN ode(DB, f, minsup)
tmp ← tmp ∪ expandW ithN ewEdge(DB, f, minsup)

end for
tmp ← pruneN onCannonical(tmp, minsup)
tmp ← f ilterN otW antedF ragments(tmp, minsup)
tmp ← f ilterN otF requentF ragments(tmp, minsup)
F ← F ∪ f indConnectedDAGs(tmp)
tmpF ← tmp

end while

18 end

the runtime of the algorithm. To avoid generating duplicates, all newly expanded
sub-DAGs are checked for duplicate canonical form [10] because the canonical
form is unique for all duplicate isomorphic DAGs.

Example 4. Consider Fig. 3, which shows some examples of applications of the
four expansion rules: WDAGmeet algorithm (a) inserts a new root PRO, (b) in-
serts another new root REQ, and (c) introduces a new level with the insertion
of POS and of a triggering relation from PRO to POS. Afterwards, WDAGmeet
(d) inserts into the current level a new node NEG triggered by REQ, (e) adds
a new edge from PRO to the most recently inserted NEG. Similarly, WDAG-
meet (f) introduces another new level (with the insertion of NEG, to which a
triggering relation from another NEG is inserted) and (g) adds a new edge from
(cid:2)(cid:3)
PRO.

Note that, some of the expanded DAGs are connected, but some are not. WDAG-
meet algorithm only inserts frequent connected DAGs to the mining result.

Fig. 3. Applications of expansion rules

Mining Frequent Patterns from Human Interactions in Meetings Using DAGs

45

Fig. 4. First few steps of WDAGmeet algorithm

The algorithm repeats the above expansion process until no new expansion is
impossible. The pseudocode is given in Algorithm 1, and Fig. 4 illustrates the
ﬁrst few steps of the algorithm.

One important observation on the WDAGmeet algorithm is that, when the
patterns are expanded, it adds not only frequent nodes but all possible nodes.
The reason is that, the expansion rules do not satisfy the anti-monotone prop-
erty: A pattern f may not be frequent because of low average-weight of the nodes
contained in it, but connecting some nodes (of heavier weight or high support)
can make f frequent.

4 Evaluation Results

First, we evaluated the functionality of our proposed WDAGmeet algorithm by
comparing it with the existing tree-based mining method [12]. The tree-based
method misses some important frequent patterns because it does not capture
all triggering relations. As illustrated in Fig. 5, only one triggering relation is
captured in the tree database for each triggered interaction. For instance, the
tree captures the interaction ASK triggered by PRO but misses the one triggered
by POS. Similarly, the tree captures the interaction NEG triggered by PRO
but misses the one triggered by ASK. As such, the tree-based method does
not generate the pattern POS-ASK-NEG as these three nodes are not directly

46

A. Fariha et al.

connected in the tree. In fact, fragments containing siblings or ancestor’s siblings
of a node cannot be connected in the absence of their common ancestor in a
tree. Hence, if the common ancestor is not frequent, the tree mining method
fails to mine such fragments as a frequent pattern. In contrast, being internally
connected with partial triggering relations, WDAGmeet discovers this kind of
frequent interaction patterns, such as POS-ASK-NEG in the above example.
This kind of frequent patterns reveals highly correlated interactions.

Fig. 5. DAG-based vs. tree-based representations of meetings

Next, we evaluated empirically the performance and eﬀectiveness of WDAG-
meet algorithm, which was implemented in C++. In our experiments, we used
datasets based on sample meetings. We generated 10 synthetic datasets to simu-
late real meeting scenarios. Each dataset contains a description of (i) the meeting
captured in a DAG, (ii) labeled interactions with their corresponding weights,
and (iii) triggering relations (i.e. directed edges of the DAG). We used ﬁve dis-
tinct weights for ranking each nine interaction with one of the nine class labels.
Experiments were run using an Intel Core i5 2.50 GHz machine with 2.94 GB of
RAM and 32 bit OS (Windows 7).

Table 1 shows the number of discovered frequent patterns and the elapsed
time to discover these frequent patterns when using diﬀerent minimum support
minsup threshold values performed on 10 diﬀerent datasets having diﬀerent sizes.
Table 1 shows that, as the number of frequent patterns increased, the required
time to discover these frequent patterns also increased.

Fig. 6 plots the number of frequent patterns and elapsed time vs. DB size in
the right and left, respectively. One can observe that, on average, the number
of discovered frequent patterns (or fragments) was loosely related to the size of
DAGs. Dense DAGs usually generated more frequent patterns than sparse ones.
When patterns were generated, it was more likely to locate those patterns in
a dense DAG than a sparse one because the dense DAG contains most of the
probable edges. In contrast, the probability of ﬁnding a frequent pattern was
low in a sparse DAG. The increment of DB size can partially represent the
sparseness of the DAG capturing interactions in meetings.

Then, we compared the performance of WDAGmeet algorithm with that
of the existing tree-based mining method [12] empirically. Table 2 shows our
experimental results, which can be explained as follows. During the mining

Mining Frequent Patterns from Human Interactions in Meetings Using DAGs

47

Table 1. #frequent patterns & elapsed time with various minsup for diﬀerent DB

Size of DB (bytes) minsup (%) #frequent patterns Elapsed time (seconds)

6917

5804

5465

40
50
60
70
30
40
50
60
50
55
60
65

415
139
26
16
481
184
25
3
135
87
73
59

440.589
92.475
17.672
9.385

401.539
119.821

8.917
0.856
86.668
61.318
53.787
47.327

Fig. 6. Elapsed time and number of frequent patterns vs. DB size

process, any frequent pattern must be connected because neither WDAGmeet
nor the tree-based method can search DB for a pattern or fragment that is not
connected. As discussed earlier, the tree-based mining method missed some fre-
quent patterns. In contrast, WDAGmeet algorithm did not miss these patterns.
Moreover, WDAGmeet algorithm used weighted nodes for representing the im-
portance/rank of persons triggering each interaction. This criterion decreased
the number of frequent patterns discovered by WDAGmeet. Moreover, WDAG-
meet distinguished multiple interactions initiated by diﬀerent persons having
diﬀerent weights. In contrast, the tree-based method did not distinguish mul-
tiple interactions. Hence, as WDAGmeet captures all triggering and temporal
relations, it generated fewer frequent patterns and did not miss any frequent
patterns. In contrast, the tree-based method generated more frequent patterns
but also missed some frequent patterns.

To summarize, WDAGmeet algorithm discovered frequent interaction patterns
from weighted DAGs capturing human interactions in meetings in reasonable
amounts of time. When minsup increased, the number of discovered frequent pat-
terns decreased and the elapsed time also decreased. When compared with the

48

A. Fariha et al.

Table 2. #frequent patterns & elapsed time for tree-based vs. our DAG-based mining

Size of DB minsup #frequent patterns in #frequent patterns

(bytes)

6917

5804

5465

(%)
40
45
50
30
35
40
50
55
60

tree-based method [12]

in WDAGmeet

635
298
153
509
482
201
146
95
79

415
262
139
481
442
184
135
87
73

existing tree-based method (which captures few triggering and all temporal
relations), WDAGmeet algorithm captures all triggering relations as well as all
temporal relations. Moreover, WDAGmeet algorithm does not miss any frequent
interaction patterns. As an ongoing work, we plan to conduct more extensive ex-
periments and compare the precision, recall and F-measure of our proposed
WDAGmeet algorithm with those of the existing tree-based method.

5 Conclusions

In this paper, we modeled human interactions in meetings using a weighted di-
rected acyclic graph (DAG). The weight indicates the rank or importance of
the person who initiates one of the nine classes of interactions. Such a DAG-
based representation of interaction ﬂow captures both (i) temporal relations and
(ii) triggering relations (which connect the triggering interaction to the triggered
interaction) in meetings. Moreover, we also proposed DAG-based frequent pat-
tern mining from interaction ﬂow DAGs. Speciﬁcally, our proposed WDAGmeet
algorithm mines weighted DAG-based meeting for frequent interaction patterns.
The key idea is to model each session (especially decision-making sessions) of a
meeting using DAGs. Moreover, DAGs also include patterns or fragments that
are connected without any common ancestor, previously missed by the exist-
ing tree-based method. The integration of weight assignment to each interaction
makes the meeting mining process more robust and worthwhile.

Evaluation results show that WDAGmeet algorithm was more eﬀective in
discovering frequent interaction patterns from weighted DAGs than the existing
tree-based method. The mined frequent sub-DAGs can be served as foundations
to further association rule mining. As ongoing work, we plan to integrate other
types of human interactions. Moreover, the resulting mining algorithm can be
customized to handle other classes of meetings such as medical interviews and
business discussions. The property of assigning weights to the interactions and
preserving all kinds of partially triggering relations add functionality of WDAG-
meet in mining patterns from human interactions in meetings.

Mining Frequent Patterns from Human Interactions in Meetings Using DAGs

49

Acknowledgements. This project is partially supported by NSERC (Canada)
and University of Manitoba.

References

1. Ahmed, C.F., Tanbeer, S.K., Jeong, B.-S., Lee, Y.-K.: An eﬃcient candidate prun-
ing technique for high utility pattern mining. In: Theeramunkong, T., Kijsirikul,
B., Cercone, N., Ho, T.-B. (eds.) PAKDD 2009. LNCS (LNAI), vol. 5476, pp.
749–756. Springer, Heidelberg (2009)

2. Ahmed, C.F., Tanbeer, S.K., Jeong, B.-S., Lee, Y.-K., Choi, H.-J.: Single-pass
incremental and interactive mining for weighted frequent patterns. Expert Systems
with Applications 39(9), 7976–7994 (2012)

3. Chen, Y.-L., Kao, H.-P., Ko, M.-T.: Mining DAG patterns from DAG databases.
In: Li, Q., Wang, G., Feng, L. (eds.) WAIM 2004. LNCS, vol. 3129, pp. 579–588.
Springer, Heidelberg (2004)

4. Leung, C.K.-S., Mateo, M.A.F., Brajczuk, D.A.: A tree-based approach for fre-
quent pattern mining from uncertain data. In: Washio, T., Suzuki, E., Ting, K.M.,
Inokuchi, A. (eds.) PAKDD 2008. LNCS (LNAI), vol. 5012, pp. 653–661. Springer,
Heidelberg (2008)

5. McCowan, L., Gatica-Perez, D., Bengio, S., Lathoud, G., Barnard, M., Zhang, D.:
Automatic analysis of multimodal group actions in meetings. IEEE TPAMI 27(3),
305–317 (2005)

6. Otsuka, K., Sawada, H., Yamato, J.: Automatic inference of cross-modal nonverbal
interactions in multiparty conversations: “who responds to whom, when, and how?”
from gaze, head gestures, and utterances. In: ICMI 2007, pp. 255–262. ACM (2007)
7. Tanbeer, S.K., Ahmed, C.F., Jeong, B.-S., Lee, Y.-K.: Discovering periodic-
frequent patterns in transactional databases. In: Theeramunkong, T., Kijsirikul,
B., Cercone, N., Ho, T.-B. (eds.) PAKDD 2009. LNCS (LNAI), vol. 5476, pp.
242–253. Springer, Heidelberg (2009)

8. Termier, A., Tamada, Y., Numata, K., Imoto, S., Washio, T., Higuchi, T.:
DIGDAG, a ﬁrst algorithm to mine closed frequent embedded sub-DAGs. In: MLG
(2007)

9. Waibel, A., Bett, M., Finke, M., Stiefelhagen, R.: Meeting browser: tracking and
summarizing meetings. In: DARPA Broadcast News Transcription and Under-
standing Workshop (1998)

10. Werth, T., Dreweke, A., W¨orlein, M., Fischer, I., Philippsen, M.: DAGMA: mining

directed acyclic graphs. In: IADIS ECDM 2008, pp. 11–18 (2008)

11. Yu, Z., Yu, Z., Ko, Y., Zhou, X., Nakamura, Y.: Inferring human interactions
in meetings: A multimodal approach. In: Zhang, D., Portmann, M., Tan, A.-H.,
Indulska, J. (eds.) UIC 2009. LNCS, vol. 5585, pp. 14–24. Springer, Heidelberg
(2009)

12. Yu, Z., Yu, Z., Zhou, X., Becker, C., Nakamura, Y.: Tree-based mining for dis-
covering patterns of human interaction in meetings. IEEE TKDE 24(4), 759–768
(2012)


