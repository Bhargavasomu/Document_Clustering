Mining Trajectory Corridors Using Fr´echet

Distance and Meshing Grids

Haohan Zhu1,2, Jun Luo2, Hang Yin3, Xiaotao Zhou2,

Joshua Zhexue Huang2, and F. Benjamin Zhan4

1 Institute of Computing Technology, Chinese Academy of Sciences

2 Shenzhen Institutes of Advanced Technology, Chinese Academy of Sciences
{hh.zhu,xt.zhou,zx.huang}@siat.ac.cn, {jun.luo,hang.yin}@sub.siat.ac.cn

3 University of Science and Technology of China

4 Texas Center for Geographic Information Science, Department of Geography,

Texas State University-San Marcos

zhan@txstate.edu

Abstract. With technology advancement and increasing popularity of
location-aware devices, trajectory data are ubiquitous in the real world.
Trajectory corridor, as one of the moving patterns, is composed of con-
catenated sub-trajectory clusters which help analyze the behaviors of
moving objects. In this paper we adopt a three-phase approach to dis-
cover trajectory corridors using Fr´echet distance as a dissimilarity mea-
surement. First, trajectories are segmented into sub-trajectories using
meshing-grids. In the second phase, a hierarchical method is utilized to
cluster intra-grid sub-trajectories for each grid cell. Finally, local clus-
ters in each single grid cell are concatenated to construct trajectory
corridors. By utilizing a grid structure, the segmentation and concatena-
tion need only single traversing of trajectories or grid cells. Experiments
demonstrate that the unsupervised algorithm correctly discovers trajec-
tory corridors from the real trajectory data. The trajectory corridors us-
ing Fr´echet distance with temporal information are diﬀerent from those
having only spatial information. By choosing an appropriate grid size,
the computing time could be reduced signiﬁcantly because the number
of sub-trajectories in a single grid cell is a dominant factor inﬂuencing
the speed of the algorithms.

Keywords: Trajectory, Fr´echet Distance, Meshing Grids.

1 Introduction

With the technology progress and popularity of location-aware devices, vast data
of moving objects have been collected. Trajectory data are ubiquitous in the
real world including tropical cyclones data, transportation system data, ﬂock-
ing sheep data, migrating birds data, to name a few. Consequently, trajectory
analysis has become a pragmatic tool to discover moving objects patterns. Tra-
jectory corridor, through which the moving objects frequently pass, is one of the

M.J. Zaki et al. (Eds.): PAKDD 2010, Part I, LNAI 6118, pp. 228–237, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010

Mining Trajectory Corridors Using Fr´echet Distance and Meshing Grids

229

Trajectory Corridor

Cluster 3

Cluster 1

Cluster 2

Trajectory

Cluster
Corridor

Fig. 1. An example of trajectories, clusters and corridors

moving patterns. In this paper, we address the trajectory corridor as concate-
nated sub-trajectory clusters which could help identify and predict the behaviors
of the moving objects. An example to illustrate trajectories, local clusters and
trajectory corridors is shown in Fig.1.

Because not only may a trajectory belong to multiple trajectory corridors
simultaneously, but trajectory corridors are also composed by diﬀerent groups of
trajectories at diﬀerent parts. In this paper, we adopt a three-phase approach to
mine the trajectory corridors using Fr´echet distance and meshing grids. Firstly,
trajectories are segmented into sub-trajectories according to the meshing-grids.
In the second phase, a hierarchical method is utilized in each grid cell separately
to cluster intra-grid sub-trajectories. Finally, the local clusters in each single grid
cell are concatenated to construct trajectory corridors.

Summarizing, the contributions presented in this paper are:

– We introduce discrete Fr´echet distance as a novel dissimilarity measurement
between trajectory clustering because it is generally regarded as a more
appropriate distance function for polygonal curves and could easily consider
not only shapes, relative positions and orientations, but also velocities of
trajectories.

– We propose a meshing grid structure. By utilizing grid structure, the seg-
mentation and concatenation need only single traversing of trajectories or
grid cells. When choosing appropriate grid size, the computing time could
be reduced signiﬁcantly since the dominant factor of the computing time is
the amount of sub-trajectories in a single grid cell.

2 Related Work

Gaﬀney and Smyth[7] propose a method of trajectory clustering using mixture
of regression models. Nanni and Pedreschi[10] propose a density-based trajectory
clustering algorithm based on OPTICS[2]. In the above work, the object to be
clustered is the whole trajectory, namely, one trajectory can be only in one
cluster. Thus, trajectory corridors are not their objective.

In the trajectory clustering algorithm proposed by Lee et al.[9], trajectories are
partitioned into a set of line segments which are clustered by using DBSCAN[6]
algorithm. However, because Fr´echet distance could handle polygonal curves

230

H. Zhu et al.

well, we need not to simplify the trajectories into line segments but only cut
oﬀ trajectories into several short polygonal curves. And we adopt a hierarchical
method for clustering to avoid distance accumulation discussed in Section 5.2.

3 Preliminary Deﬁnition

In reality, a moving object trajectory is a ﬁnite set of observations at discrete
time stamps t1, t2, ··· , tn. It could be assumed that an object moves between
two consecutive time steps on a straight line and the velocity is constant along
the segment. Hence we deﬁne the trajectory τ as a polygonal line with n vertices
having time stamps.
Deﬁnition 1 (Trajectory). τ = (cid:2)(t1, p1), (t2, p2), ··· , (tn, pn)(cid:3), where pi ∈ Rd.
The space is partitioned by meshing-grids. Every grid cell Gj has an id j to
label it. The sub-trajectory is recorded in τ(cid:3)
i,j,mark where i represents the original
trajectory τi it belongs to, j represents the grid cell Gj it falls into and mark is
the mark to diﬀerentiate the diﬀerent part of the same trajectory in the same
grid. The deﬁnition of sub-trajectories is the same as that of trajectories.
Deﬁnition 2 (Local Cluster in Grid Cell Gj). Cj = (cid:2) τ(cid:3)
··· , τ(cid:3)
cell Gj.

i2,j,mark2,
ik,j,markk (1 ≤ k ≤ m) is a sub-trajectory in grid

i1,j,mark1, τ(cid:3)

(cid:3), where τ(cid:3)

im,j,markm

The local cluster in a certain grid cell is a set of sub-trajectories in that cell, so
the cluster has no shape or range. However, the cluster has its own origin and
destination. The position and velocity at origin and destination of a cluster are
average values of sub-trajectories in that cluster.
Deﬁnition 3 (Trajectory Corridor). T C = (cid:2) Cj1, Cj2, ··· , Cjl
(cid:3), where Cji
(1 ≤ i ≤ l) is a local cluster in grid cell Gji, and the consecutive local clusters
Cji and Cji+1 need to follow concatenating criteria discussed in Section 5.3.

The trajectory corridor is a sequence of local clusters and the order of the se-
quence indicates the direction of the trajectory corridor. Every trajectory corri-
dor is composed of either one local cluster or more. Moreover, diﬀerent trajectory
corridors may share the same local cluster.

4 Computing Fr´echet Distance

Distance function is the key component of mining trajectory corridors because
dissimilarity measurement is necessary to group similar trajectories. The Fr´echet
distance is a measurement for curves and surfaces. It is deﬁned using reparam-
eterizations of the shapes. The Fr´echet distance is generally regarded as being
a more appropriate distance function than the Hausdorﬀ distance or other dis-
tances for curves[1] because it takes the continuity of the shapes into account.

Mining Trajectory Corridors Using Fr´echet Distance and Meshing Grids

231

Due to high complexity of computing Fr´echet distance, the discrete Fr´echet dis-
tance as a natural variant for polygonal curves is more proper for computing.
Eiter and Mannila[5] proposed a dynamic programming algorithm to compute
discrete Fr´echet distance in O(mn) time.
Consider two polygonal curves P , Q in Rd given by the sequences of their
vertices (cid:2)p1, ··· , pn(cid:3) and (cid:2)q1, ··· , qm(cid:3), respectively. Computing discrete Fr´echet
distance only uses coupling C which is a sequence of pairs of vertices C=(cid:2)C1,
··· , Ck(cid:3) with Cr=(pi, qj) for all r=1, . . ., k and some i∈{1, . . ., n}, j∈{1, . . .,
m}, fulﬁlling
– C1=(p1, q1) and Ck=(pn, qm)
– Cr=(pi, qj) ⇒ Cr+1∈{(pi+1, qj), (pi, qj+1), (pi+1, qj+1)} for r=1, . . ., k − 1
Deﬁnition 4 (Discrete Fr´echet Distance[3]). Let P , Q be two polygonal
curves in Rd, and let | · | denote an underlying norm in Rd. Then the Discrete
Fr´echet Distance δdF (P, Q) is deﬁned as

δdF (P, Q) = min

couplingC

max

(pi,qj )∈C

|pi − qj|

where C ranges over all couplings of the vertices of P and Q.
If the distance computation |·| between vertices ignores velocities of trajectories,
the distance function is shape dependent only like DTW[8], LCSS[11], EDR[4]
and so on. However, the two trajectories may have similar shapes, but actually
they represent totally diﬀerent moving patterns when considering velocities il-
lustrated in Fig.2. Yanagisawa et al.[12] propose a measurement combined DTW
distance with Euclidean distance which considers both velocities and shapes of
moving objects, whereas the distance is sensitive to the grouping parameter μ
and they require time duration of diﬀerent trajectories to be the same length.
Hence another merit brought by Fr´echet distance is that it could easily take
account of velocities. By substituting | · | between vertices, not only spatial in-
formation of trajectories but also temporal information of trajectories can be
considered. In our paper, a simply solution is provided that the distance | · |
ωs(Δx2 + Δy2) + ωtΔv2,
between two vertices in two dimensions is deﬁned as
and weights ωs and ωt diﬀerentiate the eﬀects of spatial properties and temporal

(cid:2)

q5

p4

q4

p3

q3

t

p5

X

p1

q1

p2

Y

q2

Fig. 2. The trajectories with similar shapes but diﬀerent velocities

232

H. Zhu et al.

properties. v is the instant velocity at the vertex. If ωt = 0, |·| is translated into
Euclidean norm. The experiments in Section 6 illustrates the trajectory corri-
dors considering velocities are quite diﬀerent from those using ωt = 0. Actually,
adjusting weights to make spatial and temporal properties equally important is
empirical and inﬂuenced by spatial and temporal units.

5 Mining Trajectory Corridors

The procedure of mining trajectory corridors which is composed of three phases
is illustrated in Fig.3. In the ﬁrst phase, trajectories are segmented into sub-
trajectories according to the meshing-grids. In the second phase, the hierarchi-
cal clustering algorithm based on discrete Fr´echet distance is implemented in
each grid cell. Finally, the local clusters in abutting grid cells are concatenated
according the concatenation criteria to discover trajectory corridors.

Segmentation

Clustering

Concatenation

Fig. 3. An example of mining trajectory corridors

In this paper, we usee meshing grids structure to segment trajectories and
concatenate local clusters because by utilizing grids, the segmentation and con-
catenation need only single traversing of trajectories or grid cells. Furthermore
when changing grid size appropriately, the computing time could be reduced
signiﬁcantly since the dominant factor of the computing time is the amount of
sub-trajectories in a single grid cell. This advantage is theoretically and experi-
mentally analyzed and discussed in Section 6.

5.1 Segmentation
Since the diﬀerent parts of a certain trajectory may belong to diﬀerent trajec-
tory corridors, segmenting trajectory into sub-trajectories is indispensable. In
the process of segmentation, the size of grid cells are assigned in advance. As
illustrated in Fig.4, when traversing each vertex in a trajectory, no segmentation
will be executed until consecutive vertices pair (pi, pi+1) are not in the same grid
cell. The intersections between the line segment pipi+1 and edges of grid cells
are computed. The trajectory is partitioned at each intersection. After segmenta-
tion, only the sub-trajectories in those grid cells which potentially contain local
clusters will be preserved for the next phase. This process may reduce comput-
ing time dramatically when many grid cells include sparse sub-trajectories. The
algorithm of segmentation costs O(n) time, where n is the sum of the vertices
of all trajectories.

Mining Trajectory Corridors Using Fr´echet Distance and Meshing Grids

233

Trajectory
p2

p3

p1

Sub-trajectories

p4

Step.1

Step.2

Step.3

p2

p1
p2

q1

q2

p3

p1

q1

p2
q1

p3

p4

q2
p3

p4

q2

Fig. 4. Illustration of Segmentation

5.2 Intra-grid Sub-trajectory Hierarchical Clustering

τ7

τ8

τ4

τ3

τ2
τ1

τ6

τ5

In this paper, we adopt an agglomerative hierarchi-
cal clustering method and use two cluster distances
dmin and dmax at the same time to avoid distance
accumulation illustrated in Fig.5. In the example, τ1
and τ8 are almost in the opposite directions but may
be merged into the same cluster because each pair
of nearby trajectories τi and τi+1 has a small dis-
tance. Two cluster distances dmin and dmax are deﬁned
as follow: dmin(Ci, Cj) = mind(p, q), dmax(Ci, Cj) =
maxd(p, q), where p ∈ Ci, q ∈ Cj, d(p, q) is mod-
iﬁed discrete Fr´echet distance between p, q. In this
phase, the computing is only executed in the grid cells that have suﬃcient sub-
trajectories. For each hierarchy, the nearest clusters are merged according to
dmin. Namely, two clusters are merged when they have the minimal dmin. How-
ever, while dmax between the nearest clusters exceeds an certain threshold, no
merging executes and the algorithm continues to the next hierarchy. Until the
minimal dmin exceeds an termination condition, clustering ceases. Finally, the
local clusters which do not have suﬃcient sub-trajectories are pruned. The algo-
rithm for each grid can be computed in O(n2l2+n2 log n+n2m2) time, where n is
the amount of sub-trajectories, l is the amount of vertices of one sub-trajectory,
m is the amount of sub-trajectories in one cluster. An example of intra-grid
sub-trajectory clustering using distance matrix and index is illustrated in Fig.6.

Fig. 5. Illustration of dis-
tance accumulation

5.3 Inter-grid Concatenation

In this phase, we propose an algorithm of concatenating local clusters to discover
trajectory corridors. The concatenation criteria is deﬁned as follow: When posi-
tions and velocities between the origin of one cluster and the destination of the
other cluster in the adjacent grid cell are similar, we call the two local clusters
are connectable. And we consider concatenation that does not require the adja-
cent local clusters sharing the suﬃcient same trajectories or even same amount
of trajectories. Trajectory corridors are continuous channels with directions that
moving objects frequently visit but enter and leave freely.

234

H. Zhu et al.

Distance Matrix
τ1
τ5

τ4

τ2

τ3

Distance Index

τ6

Termination

Max Distance
Treshold

Exceed Threshold

d1,2 d4,5 d5,6 d2,3 d1,3 d4,6

· · ·

d1,4

d1,2

d1,3 d1,4 d1,5 d1,6

d2,3

d2,4 d2,5 d2,6

d3,4 d3,5 d3,6

d4,5 d4,6

d5,6

τ1

τ2

τ3

τ4

τ5

τ6

Step 1

Step 2

Step 3

No Merging

Step 4

C1: τ1, τ2
C3: τ3
C4: τ4
C5: τ5
C6: τ6
C1: τ1, τ2
C3: τ3
C4: τ4, τ5
C6: τ6
C1: τ1, τ2
C3: τ3
C4: τ4, τ5
C6: τ6
C1: τ1, τ2, τ3
C4: τ4, τ5
C6: τ6

Step 5 Termination

Fig. 6. Illustration of intra-grid sub-trajectory clustering using distance matrix and
index

G1

G2
C1

G3

C2

G4

C3

C7

C6

T C2

G5

G6

G7

C5

G8

Step 1 Check G2

Step 2 Check G3

C4

Step 3 Check G4

T C1: C1 ⇒ C2
T C2: C1 ⇒ C3
T C1: C1 ⇒ C2 ⇒ C4
T C2: C1 ⇒ C3
T C1: C1 ⇒ C2 ⇒ C4 ⇒ C5
T C2: C1 ⇒ C3

Step 4 Check G5

Step 5 Check G6

T C1

No Catenation

T C1: C6 ⇒ C1 ⇒ C2 ⇒ C4 ⇒ C5
T C2: C6 ⇒ C1 ⇒ C3

Step 6 Check G8 No Catenation

Fig. 7. Illustration of inter-grid concatenation

In the phase of local clusters concatenation, traversing all grid cells that have
local clusters only once could ﬁnd all possible trajectory corridors. In each step,
we check one grid cell Gj and the local clusters in it. If there exists local clusters
Cq in neighbor cells having the origins connectable with the destinations of the
local clusters Cp in Gj, all trajectory corridors including Cp are catenated to
all trajectory corridors including Cq. This approach can be computed in O(nk)
time, where n is the amount of local clusters and k is the amount of trajectory
corridors. An example of concatenation is illustrated in Fig.7 and trajectory
corridors with only one cluster are hidden.

6 Experiments

In this paper, all experiments were conducted by using the tropical cyclone best
track data set1. And for all experiments, parameters including pruning criteria,
termination condition and concatenation criteria are constant.

Fig.8(a) is the result of clustering which considers both spatial and temporal
similarity, whereas, Fig.8(b) is the result of clustering which ignores the velocity.

1 http://www.jma.go.jp/jma/jma-eng/jma-center/rsmc-hp-pub-eg/besttrack.html

Mining Trajectory Corridors Using Fr´echet Distance and Meshing Grids

235

(a) velocity is considered

Trajectory

Cluster

(b) velocity is ignored
Corridor

Fig. 8. Trajectory corridors considering velocity or not

5 × 5 meshing grids

10 × 10 meshing grids

15 × 15 meshing grids

Fig. 9. Trajectory corridors in diﬀerent grid sizes

The experiments successfully demonstrate that by considering temporal proper-
ties, the sub-trajectory clusters are diﬀerent from those that have only spatial
properties.

From Fig.9, it is obvious that more grid cells produce more sub-trajectories,
local clusters and trajectory corridors. However, the computing time is reduced
signiﬁcantly, when the amount of sub-trajectories per cell decreases from 21 to
5.(see Fig.10(a)). Since building index runtime is the dominant factor in the
overall runtime illustrated in Fig.10(b), the overall running time could be ap-
proximated to O(kn2 log n), where n is the amount of sub-trajectories in one grid
cell and k is the amount of grid cells. Thus when choosing appropriate grid size,
the computing time could be reduced, because the amount of sub-trajectories
per cell may decrease. The grid size may aﬀect both computing time and clus-
tering quality. The quality of the results may decrease when grid size is larger
due to more noises. So to keep the quality of the clustering results and to reduce
computing time requires a trade-oﬀ which vary from data to dada.

The experiments successfully validate our algorithm to discover trajectory cor-
ridors. The tropical cyclones in Western North Paciﬁc and the South China Sea
often have parts of their trajectories in such a corridor: start from the position

236

H. Zhu et al.

Fig. 10. Runtime in diﬀerent meshing-grid sizes

around 135 ◦E−150 ◦E, 10 ◦N, move towards northwestern to the location about
120 ◦E−135 ◦E, 25 ◦N, then towards northeastern and ﬁnally end approximately
at 145 ◦E, 40 ◦N.

7 Conclusions

In this paper, we adopt a three-phase approach to discover trajectory corridors
using Fr´echet distance as a dissimilarity measurement. The experiments success-
fully discovered tropical cyclone corridors by segmenting, clustering and concate-
nating various components of a trajectory. The trajectory corridors discovered
by using Fr´echet distance with temporal information may be more signiﬁcant.
The use of meshing grid structure could reduce computing time eﬀectively by
choosing an appropriate grid size.

References

1. Alt, H., Knauer, C., Wenk, C.: Comparison of distance measures for planar curves.

Algorithmica 38(1), 45–58 (2003)

2. Ankerst, M., Breunig, M.M., Kriegel, H.-P., Sander, J.: Optics: Ordering points to

identify the clustering structure. In: SIGMOD Conference, pp. 49–60 (1999)

3. Buchin, K., Buchin, M., Gudmundsson, J., L¨oﬄer, M., Luo, J.: Detecting commut-
ing patterns by clustering subtrajectories. In: Hong, S.-H., Nagamochi, H., Fuku-
naga, T. (eds.) ISAAC 2008. LNCS, vol. 5369, pp. 644–655. Springer, Heidelberg
(2008)

4. Chen, L., Tamer ¨Ozsu, M., Oria, V.: Robust and fast similarity search for moving

object trajectories. In: SIGMOD Conference, pp. 491–502 (2005)

Mining Trajectory Corridors Using Fr´echet Distance and Meshing Grids

237

5. Eiter, T., Mannila, H.: Computing discrete fr´echet distance. Technical Report CD-

TR, 94(64) (1994)

6. Ester, M., Kriegel, H.-P., Sander, J., Xu, X.: A density-based algorithm for discov-
ering clusters in large spatial databases with noise. In: KDD, pp. 226–231 (1996)
7. Gaﬀney, S., Smyth, P.: Trajectory clustering with mixtures of regression models.

In: KDD, pp. 63–72 (1999)

8. Keogh, E.J.: Exact indexing of dynamic time warping. In: VLDB, pp. 406–417

(2002)

9. Lee, J.-G., Han, J., Whang, K.-Y.: Trajectory clustering: a partition-and-group

framework. In: SIGMOD Conference, pp. 593–604 (2007)

10. Nanni, M., Pedreschi, D.: Time-focused clustering of trajectories of moving objects.

J. Intell. Inf. Syst. 27(3), 267–289 (2006)

11. Vlachos, M., Gunopulos, D., Kollios, G.: Discovering similar multidimensional tra-

jectories. In: ICDE, pp. 673–684 (2002)

12. Yanagisawa, Y., Satoh, T.: Clustering multidimensional trajectories based on shape

and velocity. In: ICDE Workshops, p. 12 (2006)


