Mining Antagonistic Communities

from Social Networks

Kuan Zhang, David Lo, and Ee-Peng Lim

School of Information Systems, Singapore Management University

{kuang.zhang.2008,davidlo,eplim}@smu.edu.sg

Abstract. During social interactions in a community, there are often
sub-communities that behave in opposite manner. These antagonistic
sub-communities could represent groups of people with opposite tastes,
factions within a community distrusting one another, etc. Taking as in-
put a set of interactions within a community, we develop a novel pattern
mining approach that extracts for a set of antagonistic sub-communities.
In particular, based on a set of user speciﬁed thresholds, we extract a set
of pairs of sub-communities that behave in opposite ways with one an-
other. To prevent a blow up in these set of pairs, we focus on extracting
a compact lossless representation based on the concept of closed pat-
terns. To test the scalability of our approach, we built a synthetic data
generator and experimented on the scalability of the algorithm when
the size of the dataset and mining parameters are varied. Case studies
on an Amazon book rating dataset show the eﬃciency of our approach
and the utility of our technique in extracting interesting information on
antagonistic sub-communities.

1 Introduction

We form opinions and at times strong convictions on various issues and questions.
Based on similarity in opinions and ideals, it is common that sub-groups or
communities of users are formed. As members support or uphold a particular
view or even conviction, we also observe the dynamics of human social interaction
of antagonistic groups, i.e., two groups that consistently diﬀer in opinions.

Opposing groups and their nature have been studied in the sociology domain
[17,5,4,14,10,6]. Understanding the formation of these groups and wide-spread-
ness of opposing communities are of research interest. They could potentially sig-
nify signs of disunity in the larger community and point to sub-communities that
oppose one another. If these issues could be detected early, unwanted tensions
between communities could potentially be averted. Identiﬁcation of antagonistic
communities is also the ﬁrst step to further studies on: e.g., how the antagonistic
communities are formed, why they are formed, how does the antagonistic commu-
nities grow over time, when do the communities stop being antagonistic, etc.

Aside from enriching studies on dynamics of social interactions, information
on groups of people having opposing opinions could potentially be used for:
designing better marketing/product survey strategy by deeper understanding

M.J. Zaki et al. (Eds.): PAKDD 2010, Part I, LNAI 6118, pp. 68–80, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010

Mining Antagonistic Communities from Social Networks

69

on the nature of each sub-community and potentially an opposing one, better
recommendation of friends, or even recommendation of “non-friends”, e.g., those
whose reviews one could ignore, etc.

In this study, our goal is to discover antagonistic communities automati-
cally from their history of interactions. We design a novel pattern mining al-
gorithm to directly mine antagonistic communities. We take as input a database
of user opinions/views over things, bucketized into high/medium/low or posi-
tive/neutral/negative. From this database, we extract every two sets of users
that are antagonistic over enough number of common items/issues with a high
likelihood. Each mined pattern identiﬁes a group of users that oppose another
group over a suﬃcient number of common issues/items of interest (i.e., enough
support) with a high likelihood (i.e., enough conﬁdence).

Our approach explores the search space of all possible opposing communities
and prunes those that appear with not enough frequency/support. An apriori-
like anti-monotonicity property is used to prune the search space. Eventually the
patterns mined are checked if the conﬁdence is suﬃcient. If it is, it would then
be reported. As a frequent antagonistic pattern would have many sub-patterns
that are frequent we only report patterns that are closed. A pattern is closed if
there exists no super-pattern having the same support and conﬁdence.

To show the scalability of our approach, we developed a synthetic data gener-
ator in a similar fashion as the IBM data generator used for mining association
rules [2]. The data generator is used to test the scalability of our approach on
several dimensions of interest. The result shows that our algorithm is able to run
well on various parameter settings. We also investigates a rating dataset from
Amazon. Our algorithm is able to run on the real dataset and extract antago-
nistic communities. A few hundred communities are mined from the dataset.

The contributions of our work are as follows:

1. We propose a new problem of mining antagonistic communities from so-
cial network. Mined antagonistic communities could potentially be used to
shed better light on social interactions, prevent unwanted tensions in the
communities, improve recommendations and marketing strategies, etc.

2. We propose a new algorithm to mine for antagonistic communities that is

shown to be scalable.

3. We extract antagonistic communities from real datasets shedding light to

the extent of consistent antagonistic behavior in real rating datasets.

The structure of this paper is as follows. Section 2 describes some related work.
Section 3 formalizes some concepts and the semantics of antagonistic communi-
ties. Section 4 describes our mining algorithm. Experiments and case studies are
described in Section 5. We ﬁnally conclude and describe future work in Section 6.

2 Related Work

There have been a number of studies on ﬁnding communities in social net-
work [3,9,8]. In this study we enrich past studies by discovering not cohesive

70

K. Zhang, D. Lo, and E.-P. Lim

communities but ones with opposing sub-communities. We believe these two
source of information could give more light to the social interactions among
users in Web 2.0.

Antagonistic communities is also related to the concept of homophily. Mem-
bers of a pair of antagonistic communities, intuitively share more preferences
with those in the same community and share less preferences with others from
the opposing community. There have been a number of studies on homophily in
social networks [16]. In this work, our mined communities not only express sim-
ilar preferences but also opposing preferences. Homophily and trust are closely
related as users with similar preferences are more likely to trust each other [11]. In
this sense, our work enriches existing studies on homophily and trust [12,15,13].
In the sociology, economics, and psychology communities, the concept of inter-
group antagonism has been studied by various work [17,5,4,14,10,6]. We extend
this interesting research question by providing a computation tool to automati-
cally identify opposing communities from a history of their behaviors. We believe
our tool could potentially be used to help sociologist in understanding the be-
haviors of communities from the wealth of available data of user interactions in
Web 2.0.

Our algorithm belongs to a family of pattern mining algorithms. There have
been a number of pattern mining algorithms including those mining associa-
tion rules (e.g., [2]), frequent sequences (e.g., [18]), frequent repetitive sequences
(e.g., [7]), frequent graphs, etc. The closest to our study is the body of work on
association rule mining [2]. Association rule mining also employs the concept of
support and conﬁdence like us. However, association rule mining extracts fre-
quent transactions, and relationship between transactions. On the other hand,
we extract two sets of opposing users that share many common interests/form
opinions/commonly rated items but oppose each other with high likelihood.
This problem is inherently diﬀerent from association rule mining. We show that
a similar apriori-like anti-monotonicity property holds but we employ a diﬀerent
algorithm to mine for antagonistic communities. Similar to the work in [18], we
do not report all frequent and conﬁdent groups rather only the closed ones.

3 Antagonistic Group

We formalize past histories of user social interactions in terms of ratings to items
which can be objects, views, or even ideas. Hence there is a bipartite graph
between users and objects where the arrows are labeled with rating scores. We
divide all rating scores to be high, medium, low rating polarities depending
on the score ranges. For example in Epinions where there is a 5-point scale
assigned to an item by a user, we bucketize rating scores of 1 − 2 to be of low
rating polarity, 3 to be of medium rating polarity, and 4− 5 to be of high rating
polarity. We formalize our input as a database of ratings, deﬁned in Deﬁnition 1.
We refer to the size of a rating database DBR as |DBR| which is equal to the
number of mapping entries in the database.

Mining Antagonistic Communities from Social Networks

71

Deﬁnition 1. Consider a set of users U and a set of items I. A database of
ratings consists of a set of mappings of item identiﬁers to a set of pairs, where
each pair consists of user identiﬁer and rating score. There are three types of
rating scores considered: high (hi), medium (mid), and low (lo). The database of
ratings could be formally represented as:
DBR = {itid (cid:2)→ {(usid, rtg), . . .}|itid ∈ I ∧ usid ∈ U ∧ rtg ∈ {hi, mid, lo} ∧

usid gives itid a rating of rtg}

Two ratings are said to be common between two users if the ratings are assigned
by the two users on the same item. A set of ratings is said to be common among a
set of users if these ratings are on a common set of items rated by the set of users.

Deﬁnition 2 (Antagonistic Group): Let Ui and Uj be two disjoint sets of
users. (Ui, Uj) is called an antagonistic group (or simply, a-group) if at least σ
of their common ratings satisfy all the following conditions:

– Users from Ui share the same rating polarity pi;
– Users from Uj share the same rating polarity pj; and
– pi and pj are opposite polarities.

The number of common ratings between two sets of users Ui and Uj is known as
their support count and is denoted by count(Ui, Uj). The support of the two
user sets support(Ui, Uj) is deﬁned as count(Ui,Uj )
where I represents the set of
all items.

|I|

The number of common ratings between Ui and Uj that satisfy the three con-
ditions in the antagonistic group deﬁnition (see Deﬁnition 2) is called the an-
tagonistic count, denoted by antcount(Ui, Uj). Obviously, antcount(Ui, Uj) ≤
count(Ui, Uj). The antagonistic support of the two user sets asupport(Ui, Uj)
is deﬁned as antcount(Ui,Uj )
. We also deﬁne the antagonistic conﬁdence of a
a-group (Ui, Uj) to be aconf(Ui, Uj) = antcount(Ui,Uj )
count(Ui,Uj )

|I|

.

Deﬁnition 3 (Frequent Antagonistic Group): An antagonistic group (Ui,Uj)
is frequent if support(Ui, Uj) ≥ λ and asupport(Ui, Uj) ≥ λ × σ where λ is the
support threshold (∈ (0, 1)), and σ is the antagonistic conﬁdence threshold
(∈ (0, 1)).
We consider (Ui, Uj) to subsume (U
i ⊆ Ui and U
(cid:3)
U
Frequent a-groups satisfy the important Apriori property as stated below.

(cid:3)
j) if: (a) U
j ⊂ Uj. We denote this by (U
(cid:3)

j ⊆ Uj; or (b)
(cid:3)

j) ⊂ (Ui, Uj).
(cid:3)

i ⊂ Ui and U
(cid:3)

(cid:3)
i , U

(cid:3)
i , U

Due to space constraint, we move the proof to [1].
Property 1 (Apriori Property of Freq. A-group): Every size (k−1) a-group
(U

(cid:3)
j) subsumed by a size-k frequent a-group (Ui, Uj) is frequent.

(cid:3)
i , U

Deﬁnition 4 (Valid Antagonistic Group): An a-group (Ui, Uj) is valid if it
is frequent and aconf(Ui, Uj) ≥ σ.

72

K. Zhang, D. Lo, and E.-P. Lim

Deﬁnition 5 (Closed Antagonistic Group): A valid a-group (Ui, Uj) is
closed if ¬∃(U
(cid:3)
antcount(U
i, U

(cid:3)
(cid:3)
(cid:3)
j), count(U
i , U
i , U
(cid:3)
j) = antcount(Ui, Uj).

(cid:3)
j) = count(Ui, Uj) and

j).(Ui, Uj) ⊂ (U
(cid:3)

(cid:3)
i, U

Example 1. Consider the example rating database in Table 1 (left). Suppose
λ = 3 and σ = 0.5. Both (a, d) and (a, bd) are valid a-groups. However, since
count(a, d) = count(a, bd) = 3 and antcount(a, d) = antcount(a, bd) = 2, (a, d)
is not a closed a-group and is subsumed by (a, bd). Hence, (a, d) is considered as
redundant. On the other hand, both (a, b) and (a, bc) are closed a-groups even
3. This is
though both aconf(a, b) and aconf(a, bc) has the same value which is 2
so as count(a, b) (cid:11)= count(a, bc) and antcount(a, b) (cid:11)= antcount(a, bc).

Table 1. Example Rating Database 1 (DBEX1), 2, and 3

Item User ratings
i1
i2
i3
i4
i5
i6

a-hi, b-lo, d-lo
a-hi, b-lo, d-lo
a-hi, b-hi, d-hi
a-hi, b-lo, c-lo
a-hi, b-lo, c-lo
a-hi, b-hi, c-lo

Item User ratings
i1
i2
i3
i4
i5

a-hi, b-lo, c-lo
a-hi, b-lo, c-lo
a-hi, b-lo, c-hi
d-hi, e-lo, f -lo
d-hi, e-hi

Item User ratings
i1
i2
i3

a-hi, b-lo, d-lo
a-hi, b-lo, d-lo
a-hi, b-hi, d-hi

(cid:3)
i, U

(cid:3)
i , U

(cid:3)
j) does not imply that antcount
Note that count(Ui, Uj) = count(U
(cid:3)
(Ui, Uj) = antcount(U
j), and vice versa. We
can show this using the rating database example in Table 1 (middle). In this
example, we have count(a, b) = count(a, bc) = 3 but (antcount(a, b) = 3) >
(antcount(a, bc) = 2). We also have antcount(d, e) = antcount(d, ef) = 1 but
(count(d, e) = 2) > (count(d, ef) = 1).

j) for any (Ui, Uj) ⊂ (U
(cid:3)

(cid:3)
i , U

Deﬁnition 6 (Antagonistic Group Mining Problem): Given a set of items
I rated by a set of users U, the antagonistic group mining problem is to ﬁnd all
closed antagonistic groups with the given support threshold λ and antagonistic
conﬁdence threshold σ.

4 A-Group Mining Algorithm

We develop a new algorithm to mine for antagonistic groups from a database
of rating history. The database could be viewed as a cleaned representation of
people opinions or views or convictions on various items or issues. Our algorithm
systematically traverses the search space of possible antagonistic groups using a
search space pruning strategy to remove unfruitful search spaces.

The a-group mining algorithm runs for multiple passes. In the initialization
pass, we calculate the count and antcount of all the size-2 a-group candidates
and determine which of them are frequent. In the next pass, with the set of
frequent a-groups found in the previous pass, we generate new potential frequent
a-groups, which are called candidate set. We then count the actual count and

Mining Antagonistic Communities from Social Networks

73

antcount values for these candidates. At the end of this pass, we determine the
frequent candidates, and they are used to generate frequent a-groups for the
next pass. After that, we ﬁlter the previous frequent a-group set with the newly
generated frequent a-group set by removing non-closed a-groups. Then we move
on to the next pass. This process continues until no larger a-groups are found.
After successful mining of all frequent a-groups, we derive the valid a-groups
from them.

Input: λ; σ; rating database
Output: valid and closed a-group of all size
L1 = frequent user set;
C2 = {({ui}{uj})|i < j, ui ∈ L1, uj ∈ L1};
for k = 2;k ≤ |U| and |Lk−1| (cid:4)= 0; k++ do

if k > 2 then

Ck=antGrpMining-gen(Lk−1);

end
root← buildHashTree(k,Ck);
foreach item t ∈ D do
Ct=subset(t,root);
foreach candidate c in Ct do

update count and antcount of c;

end

|I|

end
Lk={gk ∈ Ck| count(gk)
Lk−1=prune(Lk−1, Lk);
k Lk| antcount(g)

count(g)

end
G={g ∈ (cid:2)
Output G;

≥ λ and antcount(gk)

≥ λ × σ};

|I|

≥ σ};

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

Algorithm 1. Mining Algorithm – Clagmine(λ,σ,DBR)

Algorithm 1 shows the a-group mining algorithm known as Clagmine. Two
basics data structures are maintained namely Lk the intermediary set of frequent
a-groups of size k and Ck a candidate set of size k for valid a-groups checking.
The ﬁrst two lines of the algorithm derives size-2 candidates to get the fre-
quent size-2 a-groups. It forms the base for subsequent processing. A subsequent
pass, say pass k, consists of three phases. First, at line 5, the a-groups in Lk−1
found in k − 1 pass are used to generate the candidate a-group set Ck, using the
antGrpMining-gen method in Algorithm 2. Next, the database is scanned and
the count and antcount of candidates in Ck is updated (lines 7 to 13). We make
use of the hash-tree data structure described in [2] to hold Ck and we then use a
subset function to ﬁnd the candidates overlap with the raters of an item. After
we marked all the overlapped candidates, we update the count and antcount
of them. Frequent a-groups can be determined by checking count and antcount
against the support threshold and λ × σ thresholds respectively. Following that,
Lk−1 is ﬁltered with the newly generated a-groups to remove non-closed a-groups
(line 15). After all the passes, the valid a-group is determined from the frequent

74

K. Zhang, D. Lo, and E.-P. Lim

a-group set (line 17). The following subheadings zoom into the various compo-
nents of the mining algorithm in more detail.
Input: size-(k − 1) frequent a-group set Lk−1
Output: size-k candidate frequent a-group set
foreach p, q ∈ Lk−1 do
gk ← merge(p, q);
add gk to Ck;
forall (k − 1)-subsets s of gk do

1

2

if s¬ ∈ Lk−1 then

3

4

5

6

7

8

9

10

delete gk from Ck;

end

end

end
return Ck;

Algorithm 2. antGrpMining-gen(Lk−1)

Candidate Generation and Pruning. The antGrpMining-gen function de-
scribed in Algorithm 2 takes Lk−1, the set of all frequent size-(k − 1) a-groups
as input. It returns a superset of all frequent size-k a-groups. It works as below.
First, we merge all the elements in Lk−1 that share the same sub-community of
size-(k-2). Each of them can be merged into a size-k candidate a-group consist-
ing of the common sub-community and the two diﬀering members. We add the
candidate a-groups to Ck. Next, in the pruning stage, we delete gk ∈ Ck if some
(k − 1) subset of gk is not in Lk−1.
The pruning stage’s correctness is guaranteed by Property 1. From the prop-
erty, if gk is frequent, all its (k − 1) subsets must be frequent. In other words, if
any one (k − 1) subset of an a-group gk is not frequent, gk is not frequent too.
We thus prune such gks. The correctness of antGrpMining-gen function follows
from Lemma 1. Due to space constraint, we move the proofs of all lemmas and
theorems to [1].
Lemma 1. For k ≥ 3, given a set of all size-(k−1) frequent a-group, i.e., Lk−1,
every size-k frequent a-group, i.e., Lk, is in the candidate set, i.e., Ck, output
by Algorithm 2.

An example to illustrate the process of candidate generation via merging and
deletion is given below.
Example 2. Let L3 be {(u1, u2u3),(u5, u2u3),(u1u4, u2),(u1u5, u2),(u4u5, u2)}.
After the merge step, C4 will be {(u1u5, u2u3), (u1u4u5, u2)}. The deletion step
serving as apriori-based pruning, will delete the a-group (u1u5, u2u3) because
the a-group (u1u5, u3) is not in L3. We will then left with only {(u1u4u5, u2)}
in C4.

Subset Function. Candidate a-groups are stored in a hashtree as mentioned
in line 7 of Algorithm 1. Each node of the hashtree contains either a hashtable
(interior node), or a list of candidates (leaf). Each node is labeled with a user

Mining Antagonistic Communities from Social Networks

75

identiﬁer representing the user associated with this node. The hashtable at in-
terior nodes contains mappings to nodes at the next level, with each hash key
being the corresponding user identiﬁer. Every candidate is sorted according to
the user identiﬁer, and is then inserted into the hashtree.

The subset function in line 9 of Algorithm 1 ﬁnds all the candidate a-groups
among raters of item t. The raters of item t is ﬁrst sorted by their user identiﬁers.
The raters are then traversed one by one. A pointer list is kept to maintain a list
of nodes which are visited, which initially has only the root of the hashtree. For
a rater u, we traverse through all the nodes in the pointer list, if a child node of
the current node is found with label u, the child node is further checked to see
whether it is interior or leaf. If it is an interior node, we add it to the pointer
list and if it is a leaf, every a-group stored in the leaf is marked as a subset of
raters of t. A node is removed from the pointer list if all of its child nodes are in
the list (i.e., are visited). The process is repeated through all the raters of item
t. At the end, all the candidates which are subset of raters of t will be marked.
Filtering Non-Closed A-Group. The ﬁltering of non-closed a-groups corre-
sponds to line 15 in Algorithm 1. The function works as follows. For each a-group
gk in Lk, we traverse through every a-group gk−1 in Lk−1. If gk subsumes gk−1,
and the count and antcount of the two groups are equal, gk−1 can be ﬁltered.
This step ensures all the a-groups in Lk−1 are closed. By iterating through k,
we can have all the non-closed a-group of any size ﬁltered. Note that a closed
a-group could potentially subsumes a combinatorial number of sub-groups. Re-
moval of non-closed a-group potentially reduces the number of reported a-groups
signiﬁcantly.
Correctness of the algorithm. The correctness of the algorithm is guaranteed
by Theorems 1 & 2 stated below.

Theorem 1. Mined a-group set G contains all valid and closed a-groups.
Theorem 2. Mined a-group set G contains only valid and closed a-groups.

Scalability Variant: Divide and Conquer Strategy. At times, the main
memory required to generate all the candidates could be prohibitive. If there are
too many L2 patterns, storing all of them in the memory would not be feasible.
To address this issue, we perform a divide and conquer strategy by partitioning
the database, mining for each partition, and merging the result. We ﬁrst state
some new deﬁnitions and describe a property.
Deﬁnition 7 (User Containment). Consider a member m = itid (cid:2)→ P airSet
in a database of ratings DBR. We say that a user ui is contained in the entry,
denoted by ui ∈ m, iﬀ ∃ (ui, rtg) where rtg ∈ {hi, lo, mid} and (ui, rtg) is in
P airSet. We also say that a user ui is in an a-group a = (S1, S2) iﬀ (ui ∈ S1
∨ ui ∈ S2)
Example 3. To illustrate, consider the ﬁrst entry etr in the example rating
database shown in Table 1(left). The ﬁrst entry etr contains users a, b and
d: a ∈ etr, b ∈ etr, and d ∈ etr.

76

K. Zhang, D. Lo, and E.-P. Lim

Deﬁnition 8 (Database Partition). Consider a user ui and a database of
ratings DBR. The partition of the database with respect to user ui, denoted as
DBR[ui] is deﬁned as: {etr|ui ∈ etr ∧ etr ∈ DBR}

Example 4. To illustrate, projection of the database shown in Table 1(left) with
respect to user d is the database shown in Table 1(right).

Using the two deﬁnitions above, Lemma 2 describes the divide and merge mining
process.

Lemma 2 (Divide and Merge). Consider a database of ratings DBR, sup-
port threshold λ, and conﬁdence threshold σ. Let Uset be the set of users in DBR
and Cm be the shorthand of the Clagmine operation in Algorithm 1. The follow-
ing is guaranteed:

Cm(λ, σ, DBR) =

(cid:2)

ui∈USet

{g|ui ∈ g ∧ g ∈ Cm( λ×|DBR|

|DBR[ui]| , σ, DBR[ui])}

Based on Lemma 2, our algorithm to perform divide and conquer is shown in
Algorithm 3. The algorithm partitions the database one item at a time and sub-
sequently calls the original closed antagonistic group mining algorithm deﬁned
in Algorithm 1. Theorem 3 guarantees that the mined result is correct and a
complete set of a-groups are mined by Algorithm 3.

Theorem 3. Algorithm 3 would return a complete set of closed and valid a-
groups and all returned a-group would be closed and valid.

Note that the divide and conquer algorithm reduces memory costs however it
could potentially increase the runtime cost since the database would now need to
be scanned more number of times. In Section 5, we show the results of running
the two algorithms over a number of datasets.

5 Performance and Case Studies

In this section we describe our performance study using various data generated
from our synthetic data generator with various parameter values. We then de-
scribe a case study from a real book rating dataset.
Performance Study. As a summary, our synthetic data generator accepts as
input I (in ’000)(the number of items), U (in ’000)(the number of users), P (the
expected number of users rating an item), NG (average size of maximal potential
large a-group), and NL (in ’000) (number of maximal potential large a-group).
We use the following datasets:

DS1 I=100, U=10, P =20, NG=6, NL=2
DS2 I=100, U=50, P =20, NG=6, NL=2

Mining Antagonistic Communities from Social Networks

77

2000

1500

1000

500

)
s
(
e
m

i
t
n
u
R

Non-split
Split

0
0.002

0.003

0.004

0.005

0.006

λ

10000

s
p
u
o
r
g
-
a
 
f
o
 
r
e
b
m
u
N

8000

6000

4000

2000

0
0.002

0.003

0.004

0.005

0.006

λ

Fig. 1. Runtime and Patterns: DS1 at various support values

The result for dataset DS1 when varying the support threshold from 0.002 to
0.006 with σ=0.7 is shown in Figure 1. The ﬁrst graph shows the runtime needed
to execute the algorithm at various support thresholds. “Non-split” and “Split”
correspond to Algorithms 1 & 3 respectively. We only include 3 data points for
“Non-split”, as mining at lower thresholds are too long to complete. The second
graph shows the numbers of a-groups mined at various support thresholds.

Input: λ; σ; rating database
Output: valid and closed a-group of all size
USet = Set of all users in DBR;
G = {};
foreach ui ∈ USet do

G = G ∪ {ag|ui ∈ ag ∧ ag ∈ Clagmine( λ×|DBR|

|DBR[ui]| ,σ,DBR[ui])};

end
Output G;

Algorithm 3. Clagmine-partitional(λ,σ,DBR)

1

2

3

4

5

6

The result shows that the time taken grows larger when support threshold is
reduced. This growth is accompanied by the growth in the number of a-groups
mined. Also, many longer patterns are mined as the support threshold is lowered.
For DS2, we consider a larger number of users. The results for various support
thresholds with σ=0.7 are shown in Figure 2. We have also conducted additional
performance studies and their results can be found in our technical report [1].
The performance study has shown that the algorithm is able to run well on
various settings. The lower the support threshold the more expensive it is to
mine. Also, the larger the number of users (or items or expected number of users
rating an item – see [1]), the more expensive it is to mine.
Case Study. For the case study, we consider a dataset of book ratings from
Amazon. There are a total of 99,255 users ratings 108,142 books in 935,051
reviews. The experiment is run with σ=0.5. The result is shown in Figure 3.

The number of mined a-groups in the real dataset is small even on much
lower support threshold. Interestingly, we ﬁnd that antagonistic behavior is not
so much apparent on item ratings.This might be the case since the objects rated
are not “sensitive” items that tend to divide people into opposing groups.

78

K. Zhang, D. Lo, and E.-P. Lim

)
s
(
e
m

i
t
n
u
R

3000
2500
2000
1500
1000
500
0
0.002

Non-split
Split

0.003

0.004

λ

0.005

0.006

s
p
u
o
r
g
-
a

 
f
o
 
r
e
b
m
u
N

7000
6000
5000
4000
3000
2000
1000
0
0.002

0.003

0.004

λ

0.005

0.006

Fig. 2. Runtime and Patterns: DS2 at various support values

)
s
(
e
m

i
t
n
u
R

12000
10000
8000
6000
4000
2000
0

Non-Split
Split

Non-Split Not Minable

10

20

30

Absolute λ

40

50

250

200

150

100

50

0

s
p
u
o
r
g
-
a
 
f
o
 
r
e
b
m
u
N

10

20

30

Absolute λ

40

50

Fig. 3. Runtime and Patterns: Book ratings dataset at various support values

Several interesting a-groups are discovered from the Amazon dataset by run-
ning the mining algorithm with absolute support (i.e., λ × |I|) of 10 and σ=0.5.
Out of 167 a-groups generated, 147 are of size 2, 18 of them are of size 3, and 2
of them are of size 4. We post-process to retain those with aconf > 0.7, and at
least one user has (commonly-rated-items/ totally-rated-items) > 0.6.

Table 2. Interesting Examples from Amazon Book Rating Dataset

ID Antagonistic Groups
Commonly
Ratings
1 ({Johnston},{Weissgarber})
12
2 ({Johnston, Jump},{Weissgarber}) 10
3 ({Johnston, Hill},{Weissgarber})
10
4 ({Leeper},{Weissgarber})
10
5 ({Kern},{Sklarski})
14

Ratings by
User 1
56
56
56
137
452

Ratings by
User 2
13
61
106
13
22

Ratings by
User 3
-
13
13
-
-

After post-processing, we note 5 of the most interesting a-groups. We select
those having highest aconf and average (common-item/total item) over all con-
stituent users. They are represented in table 2. We select the ﬁrst a-group and
observe the following:

– High antagonistic level: We observe that the two users in the ﬁrst a-group
rated with a high level of antagonism. Among Jason Johnston’s 56 rated
books, 12 have ratings opposite to the ratings by Luke Weissgarber. Similarly
for Weissgarber, 12 of all his 13 rated books have ratings opposite to those by
Johnston, which means more than 92% of Weissgarber’s ratings are opposite
to Johnston’s. It is a signiﬁcantly high ﬁgure.

Mining Antagonistic Communities from Social Networks

79

– Antagonistically rated books: We found that for books with opposite ratings
from Weissgarber and Johnston are some novels with similar story back-
ground. These books are clearly liked by Johnston but not by Weissgarber.
– Antagonistically behaved users: It is interesting that Weissgarber appears in
four a-groups. His ratings are opposite to other 4 users for at least 10 books.

6 Conclusion and Future Work

In this study, we proposed a new pattern mining algorithm to mine for an-
tagonistic communities. Our algorithm traverses the search space of possible
antagonistic groups and uses several pruning strategies to remove search space
containing no antagonistic pattern. We also propose a new variant of the al-
gorithm that adopts a divide and conquer strategy in mining when the ﬁrst
algorithm becomes prohibitively expensive to run. A performance study is con-
ducted on various synthetic datasets to show the scalability of our approach on
various parameter values. We also mine from an Amazon book rating dataset.
The result shows that antagonistic communities exists but are not particularly
many or large in the Amazon dataset. In the future, we plan to investigate more
“sensitive” datasets and further speed up the mining algorithm.
Acknowledgement. This work is supported by National Research Foundation
of Singapore under project NRF2008IDM-IDM004-036. We would like to thank
Paolo Massa for sharing his Epinions dataset. We would also like to thank Bing
Liu for sharing the book ratings dataset.

References

1. http://www.mysmu.edu/phdis2008/kuan.zhang.2008/agroup.pdf (2009)
2. Agrawal, R., Srikant, R.: Fast algorithms for mining association rules. In: Proceed-

ings of International Conference on Very Large Data Bases (1994)

3. Cai, D., Shao, Z., He, X., Yan, X., Han, J.: Community mining from multi-relational
networks. In: Jorge, A.M., Torgo, L., Brazdil, P.B., Camacho, R., Gama, J. (eds.)
PKDD 2005. LNCS (LNAI), vol. 3721, pp. 445–452. Springer, Heidelberg (2005)

4. Dasgupta, I.: ‘living’ wage, class conﬂict and ethnic strife. Journal of Economic

Behavior & Organization (2009) (in press)

5. Dasgupta, I., Kanbur, R.: Community and class antagonism. Journal of Public

Economics 91(9), 1816–1842 (2007)

6. Denrell, J.: Why most people disapprove of me: Experience sampling in impression

formation. Psychological Review 112(4), 951–978 (2005)

7. Ding, B., Lo, D., Han, J., Khoo, S.-C.: Eﬃcient mining of closed repetitive gapped

subsequences from a sequence database. In: ICDE (2009)

8. Flake, G., Lawrence, S., Giles, C., Coetzee, F.: Self-organization and identiﬁcation

of web communities. Computer 35(3), 66–71 (2002)

9. Gibson, D., Kleinberg, J., Raghavan, P.: Inferring web communities from link topol-

ogy. In: Hypertext (1998)

10. Giles, M., Evans, A.: The power approach to intergroup hostility. The Journal of

Conﬂict Resolution 30(3), 469–486 (1986)

80

K. Zhang, D. Lo, and E.-P. Lim

11. Golbeck, J.: Trust and nuanced proﬁle similarity in online social networks. ACM

TWeb 3(4), 1–33 (2009)

12. Guha, R., Kumar, R., Raghavan, P., Tomkins, A.: Propagation of trust and dis-

trust. In: WWW (2004)

13. Kunegis, J., Lommatzsch, A., Bauckhage, C.: The slashdot zoo: Mining a social

network with negative edges. In: WWW (2009)

14. Labovitz, S., Hagedorn, R.: A structural-behavioral theory of intergroup antago-

nism. Social Forces 53(3), 444–448 (1975)

15. Liu, H., Lim, E.-P., Lauw, H., Le, M.-T., Sun, A., Srivastava, J., Kim, Y.: Predicting

trusts among users of online communities: an epinions case study. In: EC (2008)

16. McPerson, M., Smith-Lovin, L., Cook, J.: Birds of a feather: Homophily in social

networks. Annual Review of Sociology 27(3), 415–444 (2001)

17. Tolsma, J., Graaf, N.D., Quillian, L.: Does intergenerational social mobility aﬀect
antagonistic attitudes toward ethnic minorities? British Journal of Sociology 60(2),
257–277 (2009)

18. Wang, J., Han, J.: BIDE: Eﬃcient mining of frequent closed sequences. In: ICDE

(2004)


