Peer Matrix Alignment: A New Algorithm 

Mohammed Kayed 

Faculty of Science, Beni-Suef University, Egypt 

mskayed@yahoo.com 

Abstract. Web data extraction has been one of the keys for web content mining 
that  tries  to  understand  Web  pages  and  discover  valuable  information  from 
them.  Most  of  the  developed  Web  data  extraction  systems  have  used  data 
(string/tree) alignment techniques. In this paper, we suggest a new algorithm for 
multiple string (peer matrix) alignment. Each row in the matrix represents one 
string of characters, where every character (symbol) corresponds to a subtree in 
the DOM tree of a web page. Two subtrees take the same symbol in the peer 
matrix if they are similar, where similarity can be measured using either struc-
tural,  content,  or  visual  information.  Our  algorithm  is  not  a  generalization  of  
2-strings alignment; it looks at multiple strings at the same time. Also, our algo-
rithm considers the common problems in the field of Web data extraction: miss-
ing,  multi-valued,  multi-ordering,  and  disjunctive  attributes.  The  experiments 
show  a  perfect  alignment  result  with  the  matrices  constructed  from  the  nodes 
closed  to  the  top  (root)  and  an  encourage  result  for  the  nodes  closed  to  the 
leaves of the DOM trees of the test web pages. 

Keywords:  Text  Alignment,  Tree  Alignment,  Web  Data  Extraction,  Informa-
tion Extraction. 

1 

Introduction 

Deep  web presents a huge amount of useful information  which is usually  formatted 
for its users. So, extracting relevant data from various sources to be used in web ap-
plications becomes not easy. Therefore, the availability of robust, flexible Information 
Extraction  (IE)  or  Wrapper  Induction  (WI)  systems  that  transform  Web  pages  into 
program-friendly structures such as a relational database will become a great necessi-
ty.  For  relevant  data  extraction,  unsupervised  IE  systems  exploit  the  fact  that  web 
pages of the same Web site share the same template since they are encoded in a con-
sistent manner across all the pages; i.e., these pages are generated with a predefined 
template by plugging data values. Finding such a common template requires as input 
multiple pages (page-wide IE systems; e.g., RoadRunner [1], EXALG [2], and FiVa-
Tech [3]) or a single page containing multiple records (record-wide IE systems; e.g., 
IEPAD [4], DeLa [5], and DEPTA [6]).  

A crucial step for most web data extraction systems (record/page level systems) is 
alignment: either string alignment (e.g., IEPAD and  RoadRunner) or tree alignment 
(e.g., DEPTA). Alignment of attribute values in multiple data objects (strings/trees) is 
a challenging task as these attributes are subject to the following variations [7]: 

P.-N. Tan et al. (Eds.): PAKDD 2012, Part II, LNAI 7302, pp. 268–279, 2012. 
© Springer-Verlag Berlin Heidelberg 2012 

 

Peer Matrix Alignment: A New Algorithm 

269 

•  An attribute may have zero or more values in a data-object. If the attribute has zero 
value, it is called a  missing attribute; if it has  more than one value, it is called a 
multi-valued  attribute.  A  book’s  author  may  be  an  example  of  multi-valued 
attribute, whereas a special offer is an example of missing attribute. 

•  The set of attributes (A1, A2, …, Ak) may have multiple ordering, i.e., an attribute Ai 
may  have  variant  positions  in  different  instances  of  a  data-object.  We  call  this 
attribute a multi-ordering attribute. For example, a movie site might list the release 
date before the title for movies prior to 1999, but after the title for recent movies. 

•  An attribute may have variant formats along with different instances of a data ob-
ject. If the format of an attribute is  not fixed,  we  might  need disjunctive rules to 
generalize all cases. For example, an e-commerce site might list prices in bold face, 
except for sale prices which are in red. So, price would be an example of a variant-
format (disjunctive) attribute in this site. On the other hand, different attributes in a 
data-object may have the same format, especially in table presentation, where sin-
gle <TD> tags are used to present various attributes.  

•  Most IE systems handle input documents as strings of tokens as they are easier to 
process  than  strings  of  characters.  Depending  on  the  used  tokenization  methods, 
sometimes  an  attribute  cannot  be  decomposed  into  individual  tokens.  Such  an 
attribute is called an untokenized attribute. 

Untokenized  attributes  can  be  processed  by  further  processing  after  the  alignment 
step, while missing, multi-valued, multi-ordering, and disjunctive attributes are han-
dled during the alignment step. The effectiveness of an alignment algorithm relies on 
its  capability  to  handle  such  problems.  In  this  paper,  we  suggest  a  new  alignment 
algorithm to be used as a part of web data extraction systems. Our algorithm considers 
the  above  four  mentioned  problems.  Also,  to  align  multiple  data  objects,  our  algo-
rithm processes all objects at the same time. Our algorithm doesn’t consider the prob-
lem  of  multiple-objects  alignment  as  a  generalization  of  2-objects  alignment.  So,  it 
has a global (better) view for the input objects (strings/trees). 

The  rest  of  the  paper  is  organized  as  follows.  Section  2  defines  the  peer  matrix 
alignment problem. Our proposed alignment algorithm and different examples that we 
suggest to clarify the algorithm are discussed in sections 3 and 4, respectively. Section 
5  describes  our  experiments.  The  related  works  are  presented  in  Section  6.  Finally, 
section 7 concludes our work. 

2 

Problem Definition 

String alignment is simpler than tree alignment.  Since  web pages used  with IE sys-
tems are tree  structured (DOM trees), tree alignment  will  become a  great necessity. 
Like FiVaTech, our algorithm considers the tree structure of the objects to be aligned, 
but  we  simplify  the  problem  by  converting  it  into  string  alignment  as  follows.  We 
consider all of the objects (web pages) to be aligned are tree structured and have the 
same root  p. Our algorithm collects all (first-level) child  nodes of  p in a  matrix M, 
where  each  column  keeps  the  child  nodes  for  one  root  node  p.  Every  node  in  the  
 

270 

M. Kayed 

matrix  takes  a  symbol  which  actually  denotes  a  subtree.  All  similar  subtrees  (peer 
nodes) are denoted by the same symbol. Similarity here can be measured by any suit-
able  technique  such  as  tree-edit  distance.  The  peer  matrix  shown  in  Fig.  1b  is  con-
structed from the three trees of root p in Fig. 1a. The matrix has three columns; each 
one  includes  all  child  nodes  of  one  root  p,  where  two  similar  nodes  take  the  same 
symbol.  Now,  the  problem  is  transformed  into  multiple-string  (peer  matrix)  align-
ment,  where  each  string  corresponds  to  one  column  in  the  matrix.  Handling  of  the 
problems: missing, multi-valued, multi-ordering, and disjunctive attributes is based on 
this very important alignment step. The output of this step is an aligned list in which 
missing,  repetitive,  disjunctive,  and  multi-ordering  patterns  can  be  identified  very 
easily.  For  example,  as  shown  in  Fig.  1d,  the  output  aligned  list  has  one  repetitive 
pattern (BCD),  where the two symbols B and D are optional (missing attributes) in 
this pattern. 

Fig. 1. Peer matrix construction 

 

Definition (Aligned Row): A row in the peer matrix is called an aligned row in two 
cases. The first case is occurred when all symbols in this row are the same (or disap-
pear  in  some  columns  of  the  row).  The  second  case  is  occurred  when  the  row  has 
different symbols, but these symbols correspond to leaf nodes (text or <img>) such 
that each symbol appears only in its residing column (i.e., if a symbol exists in a col-
umn c, then all other columns outside the current row in the matrix do not contain this 
symbol). All of the rows above an aligned row must be also aligned. 

Definition (Aligned Peer Matrix): A peer matrix is aligned if all of the rows in the 
matrix are aligned. Fig. 1c is an example of an aligned peer matrix. As shown in the 
aligned peer matrix, the symbol ‘-’ refers to a null value which has been added after 
shifting some symbols down to patch an empty space. 
Definition (Aligned List): If M is an aligned peer matrix, so each aligned row in the 
matrix M is represented by a symbol  which is either the  same as the  symbol in  the 
row (if the row has a same symbol) or an asterisk (if the row has different symbols 
correspond to leaf nodes). Fig. 1d is the aligned list corresponds to the one in Fig. 1c. 

 

Peer Matrix Alignment: A New Algorithm 

271 

Definition  (Peer  Matrix  Alignment  Problem):  Given  a  peer  matrix  as  input,  the 
alignment problem is to modify the content of the matrix by shifting down, swapping, 
or replacing symbols in the matrix to transform it into an aligned peer matrix.  

Fig. 2. Examples of regular and irregular zigzag lines LB and LA, respectively 

 

3 

The Proposed Algorithm 

Given a peer matrix as input, we start the matrix row by row (up-down fashion) and 
align each row using its contents and the contents of the other rows below it, to get an 
aligned  peer  matrix.  Each  row  r  is  aligned  by  processing  of  zigzag  lines  that  have 
been drawn to connect among the symbols in r and other symbols down r in the ma-
trix. Zigzag lines are drawn as follows. For each symbol s in r, we draw a sequence of 
lines  (a  zigzag  line)  Ls  that  connect  among  all  first  occurrences  of  the  symbol  s  in 
each column of the current row r or the rows below r. The zigzag line Ls of the sym-
bol s at row  r passes through different occurrences of s in different columns in r or 
below  r  with  at  most  one  occurrence  of  s  in  each  column.  Each  occurrence  of  s  is 
connected by a line with the first occurrence in the right/left hand side column. If the 
symbol does not appear in the right/left column, the line will pass to connect the first 
occurrence in the next column, and so on. All occurrences of s in the row r belong to 
the same zigzag Ls. If the symbol does not appear again in the row or below the row, 
we call it a non-zigzag symbol. This means, a non-zigzag symbol is not belonging to 
any zigzag line in the row. Fig. 2 shows two zigzag lines LA and LB at the first row. By 
drawing zigzag lines for the symbols in the row r, the challenge here is how we can 
process these zigzags to align the row r. Although, zigzag lines are different for dif-
ferent columns order in the matrix, our algorithm solves the problem in general and 
covers all suitable cases. Before we go further in this section to discuss our proposed 
alignment algorithm, we give some definitions that are important to the algorithm. 

Let l is a line in a zigzag Ls that connects two occurrences of s at the two locations 
(r1,c1) and (r2,c2) in the matrix, we define the vertical span of l as (r2 - r1+1) and the 
horizontal span as (c2 - c1+1). Also, we call a zigzag Ls horizontally covers the peer 
matrix if it is started at the first column and terminated at the last column of the ma-
trix. The vertical spans of the three lines of LA in Fig 2 are 3, 3, and 2, respectively. 
Also, the two zigzag lines LA and LB in Fig 2 horizontally cover the peer matrix. 

Definition (A Repetitive Pattern): A pattern P (a sequence of one or more consecu-
tive  symbols in a column) is  called repetitive if it  has  more than one occurrence in 
some column of the matrix. If P appears at most once in each column of the matrix, 
we call it a free (non-repetitive) pattern.  

272 

M. Kayed 

Fig. 3. A left-most cross (a) and three alignment solutions (b), (c), and (d) 

 

Definition (Symbol Span): The span of a symbol s is defined as the maximum num-
ber  of  different  symbols  (without  repetition)  between  any  two  consecutive  occur-
rences of s in each column plus one; i.e., span of s represents the maximum possible 
cycle  length  of  s.  If  s  is  a  non-repetitive  symbol,  then  its  span  value  will  be  0.  For 
example, the span of the symbol B in the matrix in Fig. 2 is 3 (there are two different 
symbols, C and A, between the two occurrences in the second column).  

In our proposed algorithm, we use the calculated span value for a symbol s to control 
(restrict)  the  process  of  shifting  down  s  in  the  matrix.  Shifting  down  the  symbol  s 
must  not  violate  the  calculated  symbol  span  value.  This  means,  if  s  occurred  only 
once in a column, it can be shifted down to anywhere in the column. But, the symbol 
s which is occurred at row r and column c cannot be shifted down if it appears up in c 
at a row r′ (i.e., r > r′) such that r-r′ ≥ span(s). For example, the symbol B in the fourth 
row and the second column of the matrix in Fig. 2 cannot be shifted down because its 
span is 3 and it appears up at the first row of the column. 
Definition (Regular Zigzag): a zigzag Ls is regular if the vertical spans of all of its 
lines are equal, and it horizontally covers the matrix. Otherwise it is called irregular. 
Fig 2 shows examples of regular and irregular zigzag lines LB and LA, respectively. 
Definition (A Top Horizontal  Zigzag): a zigzag  Ls is called horizontal if all of its 
lines are horizontal. If there is only one  horizontal zigzag in a row,  we call it a top 
horizontal.  If  there  is  more  than  one  horizontal  zigzag  line,  we  call  the  one  with  a 
maximum number of lines a top horizontal zigzag. 
Definition (Left-most Cross): Let l1 is a line ( (r,c1), (r1,c2)) which belongs to a zig-
zag La in a row r as shown in Fig. 3(a). We call the cross between the line l2 ((r,c2), 

 

Peer Matrix Alignment: A New Algorithm 

273 

(r2,c1)) in a zigzag Lb and l1 a left-most cross if the vertical distance between r2 and r 
(m2= r2-r) is a minimum. As shown in Fig. 3(a), the cross makes four patterns in the 
peer matrix: P2 and P3 are the two patterns of lengths m1 under the two ending points 
of l2, while P1 and P4 are the two patterns of lengths m2 under l1.  
To align the row r which has a left-most cross as in Fig.3 (a), we have three possible 
different alignment cases. The first case, case I, is occurred if either P1 or P3 is op-
tional (missing pattern in c2 or c1, respectively, as shown in Figures 3(c) and (d)). The 
second case, case II, is occurred when the two patterns P1 (P3) and P2 (P4) are multi-
ordering in the column c1 (c2), respectively, as shown in Fig. 3(b). Finally, the third 
case, case III, is occurred when the two patterns P1 and P3 have disjunctive attributes 
(i.e.,  same  data  presented  in  different  formats).  Our  algorithm  works  as  follows  to 
distinguish between these three cases I-III. 

If either P1≠P4 or P2≠P3, we align the row as case I (P1 or P3 is optional). Particu-
larly, if P1=P4 (while P2≠P3), we identify P3 as optional (i.e., P1 is shifted down in the 
column c1 a distance m1). If P2=P3 (while P1≠P4), we identify P1 as optional (i.e., P3 is 
shifted down in the column  c2 a distance  m2). Finally, if both  P1≠P4 and  P2≠P3,  we 
shift down either P1 or P3 based on some criteria as we will discuss later. 

If both  P1=P4 and  P2=P3, the algorithm deals  with the problem as follows.  As in 
Fig. 3 (c) and (d), to identify the pattern P1 (P3) as optional in c2 (c1), it is necessary 
(but not sufficient) that P1 (P3) is repetitive in the matrix, respectively. So, if both P1 
and P3 are non-repetitive patterns, we identify P1 (P3) and P2 (P4) as multiple-ordering 
patterns (case II) in the column c1 (c2), respectively. The challenge here is occurred 
when either P1 or P3 is repetitive. Experimentally, we have observed that case I (either 
P1 or P3 is optional) is mostly the correct alignment choice. An exception is occurred 
when P1 and P3 have disjunctive patterns (the row is aligned using case III).  

Figure 4 shows an example of case III (disjunctive attributes) when a search engine 
web site presents a list of resulted web pages as links (<A> tag), except the current 
page is presented using <STRONG> tag (i.e., the two tags <A> and <STRONG> are 
disjunctive). So, the two cases I and III are possible when either P1 or P3 is repetitive. 
We handle this problem and decide the correct alignment case based on the following 
assumption. The two patterns a1 and a2 are disjunctive, if one of the two patterns (say 
a1) appears randomly among different consecutive occurrences of the other one (a2) in 
each column of the matrix. So, we assume that, there is a left-most cross in two col-
umns c1 and c2 such that one of the two patterns P1 or P3 is a sequence of the repeti-
tive pattern a2, while the other one is a1. If so, we replace all occurrences (in the ma-
trix) of a1 by a2 and mark a1 as disjunctive with a2. In the example shown in Fig. 4, P3 
is a sequence of the repetitive pattern a2 (<A>), and P1 = <STRONG>. So, we identify 
a1 (<STRONG>) and a2 (<A>) as disjunctive patterns. Our proposed algorithm which 
handles all of these cases and others to align the row r is shown in Fig. 5. 

As shown in Fig. 5, to align the row r in M, the algorithm recursively tries to align 
r and stops at three base cases: first (lines 2-3), when r is an aligned row as defined 
before, second (lines 4-6), when r only has disjunctive attributes, and third (lines 7-
11) when r has a top-horizontal zigzag. In the first case, the algorithm returns a sym-
bol s when r has either a horizontal zigzag Ls or a non-zigzag symbol s. But, if r has 
leaf  nodes  (img/text),  the  algorithm  returns  “*”.  In  the  second  case,  the  algorithm 
checks if  r only  has disjunctive attributes by using DisjunctiveAttributes(r,  M). The 
function returns true if both of the following two conditions are satisfied: 

274 

M. Kayed 

Fig. 4. An example of disjunctive attributes in the matrix constructed from Tree1 and Tree2 

 

 

Fig. 5. Our proposed algorithm to align a row r in a peer matrix M 

─  The row r has a sequence of different symbols s1, s2, …, sk; k > 1, where each sym-

bol si is either a non-zigzag symbol or belonging to a horizontal zigzag line. 

─  For each different symbol si in r, there is a zigzag line Ls that connects among dif-

ferent occurrences of some symbol s below si. 

 

Peer Matrix Alignment: A New Algorithm 

275 

The first condition makes sure the symbols in r have no occurrences below r, while 
the second condition gives a guarantee that there exists a zigzag which prevents any 
of these symbols to be shifted down. The third stop case is occurred when the row r 
has a combination of horizontal zigzag lines (one of them  is a top-horizontal), non-
zigzag  symbols,  and  other  regular/irregular  zigzag  lines.  If  so,  the  algorithm  only 
keeps  the  top-horizontal  zigzag  in  the  row  r  and  considers  all  others  as  missing 
attributes. Therefore, it shifts all non-zigzag symbols (line 8) and all horizontal zigzag 
lines (line 9) down a distance 1, and stretches all remaining regular/irregular zigzag 
lines (line 10) using the function stretchZigzag(Ls). The function stretchZigzag works 
as follows. If  Ls is regular (i.e., Ls connects among different occurrences of s in the 
two rows r and r'; r<r'), it shifts all occurrences of s in r downward a distance r'-r in 
the matrix M and patch empty spaces with a null value. If Ls is irregular (i.e., Ls con-
nects among different occurrences of s in r and other different rows r1, …, rk below r), 
the function shifts each occurrence of s at each row ri above r΄ downward a distance 

r'-r  in  the  matrix  M  and  patch  empty  spaces  with  a  null  value,  where  the  row  r΄(cid:1488)
(cid:4668)(cid:1870)(cid:2869),…,(cid:1870)(cid:3038)(cid:4669) satisfies that r΄-r is min(r1-r, …, rk-r).  

When  the row has one regular/irregular zigzag line,  the algorithm identifies it as 
missing attribute (lines 12-14) and uses the function stretchZigzag to stretch it. Final-
ly, if the row has a left-most cross (lines 16-29), the algorithm handles it as we dis-
cussed above. The function selectAZigzag(La, Lb, r, M) returns one of the two zigzag 
lines La or Lb to be stretched based on either of the following three ordered criteria: 
First, a zigzag that has a line of non-zero minimum vertical span is returned. Second, 
the one with a maximum number of horizontal lines in the row r of the matrix M is 
returned. Third, the algorithm returns the right-most one. 

For  an (cid:1866)(cid:3400)(cid:1865)  matrix  M,  the  running  time  to  draw  zigzag  lines  for  each  row  is 
(cid:1841)(cid:4666)(cid:1866)(cid:3400)(cid:1865)(cid:4667). Also, the running time to check whether some pattern is repetitive or not is 
(cid:1841)(cid:4666)(cid:1866)(cid:3400)(cid:1865)(cid:4667).  As  a  preprocessing  step,  for  each  row,  the  running  time  for  calculating 
symbols  scan  values  is (cid:1841)(cid:4666)(cid:1866)(cid:3400)(cid:1865)(cid:4667).  Therefore,  the  running  time  for  each  call  of  the 
recursive algorithm to align a row r in the matrix M is (cid:1841)(cid:4666)(cid:1866)(cid:2870)(cid:3400)(cid:1865)(cid:2870)(cid:4667). Experimentally, a 

row is aligned after 2-3 calls. 

4 

Examples 

The two matrices in Fig. 6 give two examples of disjunctive attributes. To align the 
first row of the matrix in Fig. 6(a), the row has one horizontal zigzag LA and one non-
zigzag symbol F, and at the same time there is a zigzag LC (in the third row) which 
has occurrences of C below A and F. So, the algorithm identifies A and F as disjunc-
tive attributes (returns  s=A||F). To align the  first row of the  matrix in Fig. 6(b), the 
row has two horizontal zigzag lines LA and LF, and at the same time there is a zigzag 
LC which has occurrences of C below both A and F. So, our algorithm also identifies 
A and F as two disjunctive attributes, and then returns s=A||F. 

Fig. 7 gives two examples of a top horizontal zigzag (case ii in Fig. 5). To align the 
first row of the first matrix (Fig. 7(a)), the row has two horizontal zigzag lines LA (the 
top one because it has the maximum number of lines: 2) and LF. However, there is no 
zigzag lines that have occurrences below A and F at the same time (i.e., A and F are 
not identified as disjunctive attributes). So, the algorithm shifts down LF to the next 

276 

M. Kayed 

row in the matrix. For the matrix in Fig. 7(b), the first row has one horizontal zigzag 
LA (the top one) and one regular zigzag LB. So, the regular zigzag LB is stretched at the 
second row (i.e., all occurrences of B in the first row will be shifted down a distance 1 
and patch empty spaces with a null value). 

Fig. 6. Two examples of disjunctive attributes, case i 

Fig. 7. A row has a top horizontal zigzag, case ii 

 

 

 
Fig. 8. A row has either one regular zigzag (a) and (b), or one irregular zigzag (c); case iii 

Fig. 8 gives three examples when the row has only one non-horizontal regular zig-
zag (case iii). To align the third (second) row of the matrix in Fig. 8(a) (Fig.8(b)), the 
algorithm (line 13 in Fig. 5) stretches down LA (LC) at the fourth (third) row, respec-
tively. Fig. 8(c) gives an example when the row has only one irregular zigzag (LC). To 
align this row, LC is stretched down (line 13 in Fig. 5) at the third row. 

Fig. 9 gives two examples of missing attributes (case I in Fig. 5), when there is a 
combination of regular and irregular zigzag lines that form one or more crosses. The 
first  step  here  is  to  identify  the  left-most  cross  and  calculate  m1,  m2,  and  P1-  P4  as 
shown in Fig. 3(a). Fig. 9 (a) presents an example of missing attributes  when either 
P1≠P4  or  P2≠P3,  while  Fig.  9  (b)  presents  another  example  when  both  P1=P4  and 
P2=P3, either  P1 or  P3 is repetitive, and  none of the two patterns  P1 and  P2  is a  se-
quence of some repetitive pattern a2. In the two examples, the function selectAZigzag 
in Fig. 5 is used to select one of the two zigzag lines (that make a left-most cross) to 
be stretched down. For the first matrix in Fig. 9, the function selects LC to be stretched 
at the third row because it has a line of the minimum vertical span (2). Also, it selects 
LA to be stretched down for the same reason in the second matrix. 

Fig.  10  discusses  the  case  of  multiple-order  attributes,  where  P1=P4=”ABC”  and 
P2=P3=”FGH”, but both of the two patterns P1 and P3 are non-repetitive. So, to align 
the first row of the matrix, our algorithm exchanges the two patterns P2 and P3 in the 
third column because they are multiple-ordering patterns. We shall not give here any 
example of case III, because we already presented one in the previous section. 

 

Peer Matrix Alignment: A New Algorithm 

277 

Fig. 9. Two examples of missing attributes, case I 

 

Fig. 10. Multiple-ordering attributes, case II 

 

5 

Experiments 

We measure the performance of the proposed algorithm by collecting 300 peer ma-
trices  taken  from  a  data  set  of  10  web  sites  (selected  from  the  manually  labeled 
Testbed  for  Information  Extraction  from  Deep  Web  TBDW  [8]  Version  1.02)  as 
follows.  For  each  web  site,  we  randomly  select  30  matrices:  10  matrices  from  top 
levels (closed to the root), 10 matrices from the levels closed to the leaves, and 10 
matrices from the whole DOM tree. The performance of the algorithm is measured 
by calculating recall and precision for each selected matrix as follows. Precision is 
the proportion of symbols predicted by the algorithm as missing, disjunctive, or mul-
tiple-ordering that are targets (correctly identified). Recall is the proportion of miss-
ing, disjunctive, or multiple-ordering symbols that are predicted by the algorithm. The 
terms true positives (Tp), true negatives (Tn), false positives (Fp) and false negatives 
(Fn)  compare  the  predicted  class  of  matrix  symbols  with  the  actual  class.  Tp  is  the 
number of missing, disjunctive, or multiple-ordering symbols that are correctly identi-
fied by the algorithm. Fn is the number of missing, disjunctive, or multiple-ordering 
symbols that cannot be identified by the algorithm. Fp is the number of missing, dis-
junctive, or multiple-ordering symbols that are incorrectly identified by the algorithm. 
Finally, Tn is the number of symbols that are correctly not identified by the algorithm 
as missing, disjunctive, or multiple-ordering. Formally, we define recall and precision 
as follows: 

(cid:1844)(cid:1857)(cid:1855)(cid:1853)(cid:1864)(cid:1864)(cid:3404) 

(cid:1846)(cid:3043)(cid:1846)(cid:3043)(cid:3397)(cid:1832)(cid:3041);                    (cid:1842)(cid:1870)(cid:1857)(cid:1855)(cid:1861)(cid:1871)(cid:1861)(cid:1867)(cid:1866)(cid:3404) 

(cid:1846)(cid:3043)(cid:1846)(cid:3043)(cid:3397)(cid:1832)(cid:3043) 

The performance of the algorithm with the 30 web sites is shown in Table 1. For each 
web site, the average of the calculated recall and precision for the selected 10 matrices 
constructed closed to the root (closed to the leaves and from the whole DOM tree) is 
shown in column 2-3 (4-5 and 6-7, respectively). As shown in the table, the algorithm 
performs perfectly with matrices near to the root of a DOM tree (columns 2-3), and 

278 

M. Kayed 

gives a good result near to leaves (columns 4-5) as the matrices near to the leaves are 
complicated  and  contain  many  missing,  disjunctive,  and  multi-ordering  symbols.  
The perfect results for the matrices near to the root was not a surprise because many 
of the matrices are already/easy to be aligned. In general, the results are encouraged 
for the whole DOM tree (columns 6-7).  

Table 1. The performance of the algorithm with a data set of 10 web sites 

Closed to root 

Closed to leaves  Whole DOM tree 
Recall  Precision Recall  Precision Recall  Precision 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 

1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 

0.99 
1.00 
0.95 
1.00 
1.00 
0.91 
0.98 
0.95 
1.00 
0.98 
0.98 

0.95 
1.00 
0.93 
1.00 
0.98 
0.91 
0.99 
0.95 
0.99 
0.97 
0.97 

0.92 
0.99 
0.92 
1.00 
0.96 
0.90 
0.95 
0.95 
0.97 
0.96 
0.95 

Site 

Allnealthnet 
G. Unlimited 
IUMA 
Picsearch 
Sun-Sentinel 
amazon.co.uk 
Amazon 
Gene surname 
HomePopular 
NAMI 

Average 

0.95 
0.97 
0.92 
1.00 
0.97 
0.91 
0.96 
0.97 
0.98 
0.97 
0.96 

6 

Related Works 

IEPAD [4] and OLERA [9] generalize extraction patterns from unlabeled Web pages. 
Repetitive  patterns  in  IEPAD  are  discovered  using  the  binary  suffix  tree  PAT  tree. 
PAT  trees  compute  only  exact  match  patterns,  templates  with  exceptions  cannot  be 
discovered  through  PAT  trees.  Patterns  with  inexact  or  approximate  matching  are 
discovered using multiple string alignment technique. IEPAD applies center star algo-
rithm to align multiple strings. In OLERA [9], user marks a record to be extracted to 
discover  other  similar  records  and  generalize  them  using  multiple  string  alignment. 
OLERA handles the problem in IEPAD when several alignments exist by proposing a 
matching function to compare the primitive data for text tokens. 

RoadRunner [1] considers the site generation process as encoding of the original 
database content into strings of HTML code. The system  uses the  ACME  matching 
(alignment)  technique  to  compare  HTML  pages  of  the  same  class  and  generate  a 
wrapper based on their similarities and differences. 

DEPTA  [6]  discovers  repetitive  patterns  by  comparing  adjacent  substrings  with 
starting tags having the same parent in the HTML tag tree. The recognition of data 
items  or  attributes  in  a  record  is  accomplished  by  partial  tree  alignment.  The  algo-
rithm first chooses the record tree with the largest number of data items as center and 
then matches other record trees to the center tree. ViPER [10] assumes that repetitive 
patterns have variant lengths rather than they are of fixed length as in Depta. ViPER 
applies a tandem repeats algorithm before computing the edit-distance to handle miss-
ing  and  multiple  values  data.  It  applies  a  data  alignment  technique  that  is  based  on 

 

Peer Matrix Alignment: A New Algorithm 

279 

global  matching and text content information. The alignment  method uses a divide-
and-conquer fashion to reduce the multiple-alignment problem. 

Finally,  FiVaTech  [3]  conducts  four  steps:  peer  node  recognition,  matrix  align-
ment,  pattern  mining,  and  optional  node  detection  in  turn.  In  the  matrix  alignment 
step,  the  system  handles  the  two  problems  of  disjunctive  and  multiple-ordering 
attributes as a case of missing attributes. 

7 

Conclusions 

In  this  paper,  we  proposed  a  new  algorithm  for  multiple  string  (peer  matrix)  align-
ment. Our algorithm looked at all of the multiple strings at the same time, so it has a 
global  view  for  the  inputted  strings.  Also,  our  algorithm  considered  the  common 
problems in the field of web data extraction: missing, multi-valued, multi-order, and 
disjunctive  attributes.  To  align  a  row  in  the  peer  matrix,  our  algorithm  drew  some 
virtual  zigzag  lines  for  each  symbol  in  the  row,  and  then  tried  to  stretch/shift  some 
lines to accomplish the task. 

References 

1.  Crescenzi, V., Mecca, G., Merialdo, P.: Knowledge and Data Engineerings. In: Proc. Int’l 

Conf. Very Large Databases (VLDB), pp. 109–118 (2001) 

2.  Arasu, A., Garcia-Molina, H.: Extracting Structured Data from Web Pages. In: Proc. ACM 

SIGMOD, pp. 337–348 (2003) 

3.  Kayed,  M.,  Chang,  C.-H.:  Page-level  web  data  extraction  from  template  pages.  IEEE 

Trans. Know. and Data Eng. 22(2), 249–263 (2010) 

4.  Chang, C.-H., Lui, S.-C.: IEPAD: Information Extraction Based on Pattern Discovery. In: 

Proc. Int’l Conf. World Wide Web (WWW-10), pp. 223–231 (2001) 

5.  Wang, J., Lochovsky, F.H.: Data Extraction and Label Assignment for Web Databases. In: 

Proc. Int’l Conf. World Wide Web (WWW-12), pp. 187–196 (2003) 

6.  Zhai,  Y.,  Liu,  B.:  Web  Data  Extraction  Based on Partial  Tree  Alignment.  In: Proc.  Int’l 

Conf. World Wide Web (WWW-14), pp. 76–85 (2005) 

7.  Chang, C.-H., Kayed, M., Girgis, M., Shaalan, K.: Survey of Web Information Extraction 

Systems. IEEE Trans. Know. and Data Eng. 18(10), 1411–1428 (2006) 

8.  Yamada, Y., Craswell, N., Nakatoh, T., Hirokawa, S.: Testbed for Information Extraction 

from Deep Web. In: Proc. WWW-13, pp. 346–347 (2004) 

9.  Chang, C.-H., Kuo, S.-C.: OLERA: A semi-supervised approach for Web data extraction 

with visual support. IEEE Intelligent Systems 19(6), 56–64 (2004) 

10.  Simon, K., Lausen, G.: ViPER: Augmenting Automatic Information Extraction with Visu-

al Perceptions. In: Proc. CIKM (2005) 


