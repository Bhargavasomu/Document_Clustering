Scalable Mining of Frequent Tri-concepts

from Folksonomies

Chiraz Trabelsi1, Nader Jelassi1, and Sadok Ben Yahia1,2

1 Faculty of Sciences of Tunis, University Tunis El-Manar, 2092 Tunis, Tunisia

2 Institut TELECOM, TELECOM SudParis, UMR 5157 CNRS Samovar,

91011 Evry Cedex, France

{chiraz.trabelsi,sadok.benyahia}@fst.rnu.tn

Abstract. Mining frequent tri-concepts from folksonomies is an interesting prob-
lem with broad applications. Most of the previous tri-concepts mining based
algorithms avoided a straightforward handling of the triadic contexts and paid
attention to an unfruitful projection of the induced search space into dyadic con-
texts. As a such projection is very computationally expensive since several tri-
concepts are computed redundantly, scalable mining of folksonomies remains a
challenging problem. In this paper, we introduce a new algorithm, called TRI-
CONS, that directly tackles the triadic form of folksonomies towards a scalable
extraction of tri-concepts. The main thrust of the introduced algorithm stands in
the application of an appropriate closure operator that splits the search space into
equivalence classes for the the localization of tri-minimal generators. These tri-
minimal generators make the computation of the tri-concepts less arduous than
do the pioneering approches of the literature. The experimental results show that
the TRICONS enables the scalable frequent tri-concepts mining over two real-life
folksonomies.

Keywords: Folksonomies, Triadic Concept Analysis, Closure Operator, Equiv-
alence Classes, Triadic Concepts.

1 Introduction and Motivations

Complementing the Semantic Web effort, a new breed of so-called Web 2.0 applica-
tions recently emerged on the Web. Indeed, social bookmarking systems, such as e.g.,
DEL.ICIO.US1, BIBSONOMY 2 or FLICKR3 have become the predominant form of con-
tent categorization of the Web 2.0 age. The main thrust of these Web 2.0 systems is their
easy use that relies on simple, straightforward structures by allowing their users to label
diverse resources with freely chosen keywords aka tags. The resulting structures are
called folksonomies4, that is, ”taxonomies” created by the ”folks”. Considered as a tri-
partite hyper-graph [9] of tags, users and resources, the new data of folksonomy systems

1 http://www.delicious.com
2 http://www.bibsonomy.org
3 http://www.flickr.com
4 http://wwww.vanderwal.net/folksonomy.html

P.-N. Tan et al. (Eds.): PAKDD 2012, Part II, LNAI 7302, pp. 231–242, 2012.
c(cid:2) Springer-Verlag Berlin Heidelberg 2012

232

C. Trabelsi, N. Jelassi, and S. Ben Yahia

provides a rich resource for data analysis, information retrieval, and knowledge dis-
covery applications. Recently, the discovery of shared conceptualizations opens a new
research ﬁeld which may prove interesting also outside the folksonomy domain: closed
tri-sets (triadic concepts) mining in triadic data [6]. Actually, this line of Triadic Con-
cept Analysis did not grasp a broad attention. However, with the rise of folksonomies,
formally represented as triadic contexts, many researches advocate the extraction of
lossless concise representations of interesting patterns from triadic data.

In this paper, we are mainly interested in the mining of frequent triadic concepts (tri-
concepts for short) from 3-dimensional data, i.e., folksonomy. These patterns are among
the recent research topics in Triadic Concept Analysis. In this respect, a determined al-
gorithmic effort was furnished to get out this type of patterns. Worth of mention, the
pioneering work of Stumme et al., through the TRIAS algorithm [6], for tri-concepts
mining. TRIAS inputs a folksonomy, formally represented as a triadic context, and com-
putes all tri-concepts. However, the main moan that can be addressed to TRIAS, stands
in its need to transform the triadic context into dyadic contexts in order to extract tri-
concepts. Thus, the mining task becomes very computationally expensive and could be
avoided by extending the basic notions of FCA (Formal Concept Analysis) for the tri-
adic case. Ji et al., in [7], have proposed un alternative algorithm, called CUBEMINER,
which directly operates on the triadic context. It consists in using cubes called cutters
generalizing the cutters introduced for constraint-based mining of formal concepts [1].
Yet, in a folksonomy, the number of cutters may be very large as far as the cardinality of
at least one dimension of a folksonomy is high. Besides, the CUBEMINER algorithm op-
erates in a depth-ﬁrst manner, which has the risk of causing inﬁnite trees. More recently,
Cerf et al., in [2], proposed the DATA-PEELER algorithm with the challenge of beating
both later algorithms in terms of performance. The DATA-PEELER algorithm is able
to extract all closed concepts from n-ary relations. DATA-PEELER enumerates all the
n-dimensional closed patterns in a depth ﬁrst manner using a binary tree enumeration
strategy. However, similarly to CUBEMINER, the strategy of DATA-PEELER, involving
a depth-ﬁrst approach implies its depth’s recursion, in the worst case, to the total num-
ber of elements (whatever the dimension). Moreover, DATA-PEELER is hampered by
the large number of elements that may contain any of the folksonomy’s dimensions and
its strategy becomes ineffective and leads to a complex computation of tri-concepts.

In this respect, a compelling and thriving issue is to introduce a new scalable algo-
rithm, that overcomes the ﬂaws of the previous ones. Hence, in this work, the main
contribution is to introduce a new algorithm for tri-concepts mining, called TRICONS,
aiming at providing better scalabilty than do the pioneering approches of the litera-
ture, by applying an appropriate closure operator. In fact, the closure operator splits
the search space into equivalence classes in order to ﬁnd the tri-minimal generators.
These tri-minimal generators, representative of the different equivalence classes, make
the computation of the tri-concepts less arduous than do the aforementioned ones. In-
deed, the tri-minimal generators are the smallest elements, i.e., tri-sets, in an equiva-
lence class, while their associated closure is the largest one within the corresponding
equivalence class. Thus, the pairs - composed by Tri-MGs and their related closures -
allow, (i) an easier localization (extraction) of each tri-concept since it is necessarily

Scalable Mining of Frequent Tri-concepts from Folksonomies

233

encompassed by an Tri-MG and the related closures and; (ii) to straightforwardly han-
dle the triadic form of a folksonomy towards an efﬁcient extraction of tri-concepts.

The remainder of the paper is organized as follows. Section 2 recalls the key notions
used throughout this paper. We scrutinize the related work of mining triadic concepts
in section 3. In section 4, we introduce a new closure operator to the triadic context
as well as the TRICONS algorithm dedicated to the extraction of frequent tri-concepts.
The empirical evidences about the performance of our approach are provided in Section
5. Finally, we conclude the paper with a summary and we sketch ongoing research in
section 6.

2 Key Notions

In this section, we brieﬂy sketch the key notions that will be of use in the remainder of this
paper. In the following, we start by presenting a formal deﬁnition of a folksonomy [6].
Deﬁnition 1. (FOLKSONOMY) A folksonomy is a set of tuples F = (U, T , R, Y),
where Y ⊆ U × T × R is a triadic relation such as each y ⊆ Y can be represented by
a triple: y = {(u, t, r) | u ∈ U, t ∈ T , r ∈ R}, denoting that the user u annotated the
resource r using the tag t.
Example 1. An exemple of a folksonomyF is depicted by Table 1 with U = {u1, u2, . . .,
u7}, T = {t1, t2, . . . , t5} and R = {r1, r2, r3}. Each cross within the ternary relation
indicates a tagging operation by a user from U, a tag from T and a resource from R,
i.e., a user has tagged a particular resource with a particular tag. For example, the user
u1 has assigned the tags t2, t3 and t4, respectively, to the resources r1, r2 and r3.

Table 1. A toy example of a folksonomy that would be of use throughout the paper

U/R-T

r1

r2

r3

t1 t2 t3 t4 t5 t1 t2 t3 t4 t5 t1 t2 t3 t4 t5

× × ×
× × ×
× × ×
× × × ×
× ×

× × ×
× × × ×
× × × ×
×
×
× × × ×
× ×

× × ×
× × × ×
× × × ×
×
×
× × ×

u1
u2
u3
u4
u5
u6
u7

× × × × × × × × × × × × × × ×

The following deﬁnition presents the frequent tri-set [6].

Deﬁnition 2. (A (FREQUENT) TRI-SET) Let F = (U, T , R, Y) be a folksonomy. A tri-
set of F is a triple (A, B, C) with A ⊆ U, B ⊆ T , C ⊆ R such that A × B × C ⊆ Y.
A tri-set (A, B, C) of F is said frequent whenever |A| ≥ minsuppu, |B| ≥ minsuppt
and |C| ≥ minsuppr, where minsuppu, minsuppt and minsuppr are user-deﬁned
thresholds.

234

C. Trabelsi, N. Jelassi, and S. Ben Yahia

As the set of all frequent tri-sets is highly redundant, we will in particular consider a
speciﬁc condensed representation, i.e., a subset which contains the same information,
namely the set of all frequent tri-concepts. The latter’s deﬁnition is given in the follow-
ing [6,8].

Deﬁnition 3. ((FREQUENT) TRIADIC CONCEPT) A triadic concept (or a tri-concept
for short) of a folksonomy F = (U, T , R, Y) is a triple (U , T , R) with U ⊆ U, T ⊆
T , and R ⊆ R with U × T × R ⊆ Y such that the triple (U , T , R) is maximal, i.e.,
for U1 ⊆ U , T1 ⊆ T and R1 ⊆ R with U1 × T1 × R1 ⊆ Y, the containments U ⊆ U1,
T ⊆ T1, and R ⊆ R1 always imply (U , T , R) = (U1, T1, R1). A tri-concept is said to
be frequent whenever it is a frequent tri-set. The set of all frequent tri-concepts of F is
equal to T C = {T C | T C = (U , T , R) ∈ Y is a tri-concept}.
Given a tri-concept T C = (U , T , R), the U , R and T parts are respectively called
Extent, Intent, and Modus.

Example 2. Consider the folksonomy depicted by table 1. We can denote that the tri-set
S1={{u5, u7}, {t2, t3, t4}, {r1, r2}} is not a tri-concept of F. Whereas, T C1={{u5,
u7}, {t2, t3, t4}, {r1, r2, r3}} is a tri-concept of F : it includes all maximal tags and
resources shared by the users u5 and u7.

3 Related Work

With the rise of folksonomies, formally represented as triadic contexts, many researches
advocate the extraction of implicit shared conceptualizations formally sketched by tri-
concepts. Indeed, J¨aschke et al., in [6], introduced the TRIAS algorithm to compute
frequent tri-concepts from a folksonomy. Hence, tackling a folksonomy F = (U, T , R,
Y), TRIAS ﬁrst constructs a dyadic context K1 = (U, T × R, Y1) whose columns corre-
spond to couples of elements from T and R and then, via a projection, according to the
T and R axis, extracts formal concepts. The second step of TRIAS consists, for each
formal concept, in checking whether it is closed w.r.t. U. Actually, the main feature
of TRIAS is to exploit the subsets of tri-concepts already extracted in order to check
whether they lead to new tri-concepts. However, several tri-concepts are computed re-
dundantly inducing a number of unnecessary computations. This drawback occurs be-
cause of the particular order of extraction of tri-concepts which is strongly inspired by
the way of doing of the NEXTCLOSURE algorithm [4], dedicated to building of a lattice
of frequent closed itemsets. Nevertheless, Ji et al., in [7], have introduced an alternative
algorithm called CUBEMINER, which directly operates on the triadic context. It consists
in using cubes called cutters generalizing the cutters introduced for constraint-based
mining of formal concepts in [1]. These cutters are recursively processed to generate
candidates at each level, thus, the number of levels of the execution equals that of cut-
ters. For each cutter applied to a tri-set, three candidates are constructed accordingly to
the three axis of the folksonomy as long as the tri-set contains all elements of the current
cutter. When no more cutter is applicable on a tri-set, it becomes a tri-concept. Yet, in a
folksonomy, the number of cutters may be very large as far as the cardinality of at least
one set of F is high. Besides, the CUBEMINER algorithm operates in a depth-ﬁrst man-
ner, which has the risk of causing inﬁnite trees. Moreover, at each level, several checks

Scalable Mining of Frequent Tri-concepts from Folksonomies

235

are performed on each candidate to ensure its closeness and its uniqueness which is
very computationally expensive. Indeed, each candidate must be compared twice to the
elements of the cutters. More recently, Cerf et al., in [2], proposed the DATA-PEELER
algorithm with the challenge of outperforming both TRIAS and CUBEMINER algo-
rithms in terms of performance. The DATA-PEELER algorithm is able to extract closed
concepts from n-ary relations by enumerating all the n-dimensional closed patterns in
a depth ﬁrst manner using a binary tree enumeration strategy. At each level, the current
node of the tree is split into two nodes after selecting the element to be enumerated.
In addition, the DATA-PEELER algorithm does not store the previously computed pat-
terns in main memory for duplicate detection and closure checking. However, similarly
to CUBEMINER, the strategy of DATA-PEELER, involving a depth-ﬁrst approach, may
cause inﬁnite trees. Aiming at palliating these hindrances in effectively extracting tri-
concepts, we introduce the TRICONS algorithm dedicated to an efﬁcient extraction of
frequent triadic concepts from a folksonomy. Following the minimum description length
principle, the set of frequent tri-concepts represents a concise representation of frequent
tri-sets, by providing the shortest description of the whole set of these frequent patterns.
The main thrust of the TRICONS algorithm stands in the localisation of the smallest el-
ements, i.e., tri-sets, called tri-Minimal generators (Tri-MGs), in an equivalence class.
Indeed, these Tri-MGs are the ﬁrst reachable elements of their respective equivalence
classes, thanks to a breadth-ﬁrst sweeping of the associated search space. Doing so,
makes the computation of the tri-concepts less arduous than do the aforementioned
ones.

4 The TRICONS Algorithm

In this section, we ﬁrstly, introduce a new closure operator for a triadic context as well as
an extension of the notion of minimal generator. Thereafter, we describe the TRICONS
algorithm.

4.1 Main Notions of the TRICONS Algorithm

Lehmann and Wille have introduced in [8] two closure operators for the construction
of triadic concepts. However, these operators are only of use on dyadic contexts, i.e.,
the folksonomy should be split into three dyadic contexts. Hence, we introduce, in what
follows, a new closure operator for a triadic context.
Deﬁnition 4. Let S = (A, B, C) be a tri-set of F. A mapping h is deﬁned as follows :
h(S) = h(A, B, C) = (U , T , R) | U = {ui ∈ U | (ui, ti, ri) ∈ Y ∀ ti ∈ B, ∀ ri ∈ C}

∧ T = {ti ∈ T | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ri ∈ C}
∧ R = {ri ∈ R | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ti ∈ T}

Roughly speaking, h(S) computes the largest tri-set in the folksonomy which contains
maximal sets of tags and resources shared by a group of users containing A. For exam-
ple, considering the folksonomy F depicted by Table 1, we have h{u1, {t2, t3, t4}, r1}
= {{u1, u2, u3, u5, u7}, {t2, t3, t4}, {r1, r2, r3}}.

236

C. Trabelsi, N. Jelassi, and S. Ben Yahia

Proposition 1. h is a closure operator.

Proof. To prove that h is a closure operator, we have to prove that this closure operator
fulﬁlls the three properties of extensivity, idempotency and isotony [3].
(1) Extensivity
Let T = (A, B, C) be a tri-set of F ⇒ h(T ) = (U , T , R) such that :
U = {ui ∈ U | (ui, ti, ri) ∈ Y ∀ ti ∈ B, ∀ ri ∈ C} ⊇ A since we have (ui, ti, ri) ∈ Y
∀ ui ∈ A, ∀ ti ∈ B, ∀ ri ∈ C,

and R = {ri ∈ R | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ti ∈ T} ⊇ C since U ⊇ A and T ⊇ B.

T = {ti ∈ T | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ri ∈ C} ⊇ B since U ⊇ A
Then, (A, B, C) ⊆ (U , T , R) ⇒ T ⊆ h(T )

(2) Idempotency
Let T = (A, B, C) be a tri-set of F ⇒ h(T ) = (U , T , R) ⇒ h(U , T , R) = (U
such that :

(cid:2)

, T

(cid:2)

(cid:2)

)

, R

(cid:2)

= {ui ∈ U | (ui, ti, ri) ∈ Y ∀ ti ∈ T , ∀ ri ∈ R} = U ,
(cid:2)
U
= {ti ∈ T | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ri ∈ C} = T ,
= {ri ∈ R | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ti ∈ T
(cid:2)} = R.
(cid:2)
) = (U , T , R) ⇒ h(h(T )) = h(T )

Then, (U

, R

, T

(cid:2)

(cid:2)

(cid:2)

T
and R

(3) Isotony
Let T = (A, B, C) and T
R) and h(T

) = (U

, T

(cid:2)

(cid:2)

(cid:2)

(cid:2)

(cid:2)

(cid:2)
= (A
, C
(cid:2)
) such that :

, B

(cid:2)

) be tri-sets of F with T ⊆ T

(cid:2) ⇒ h(T ) = (U , T ,

(cid:2)

, ∀ ri ∈ C

, R
= {ui ∈ U | (ui, ti, ri) ∈ Y ∀ ti ∈ B
(cid:2)
On the one hand, U
and U = {ui ∈ U | (ui, ti, ri) ∈ Y ∀ ti ∈ B, ∀ ri ∈ C}.
and C ⊆ C
(cid:2) ⊇ U since B ⊆ B
(cid:2)
On the other hand, T = {ti ∈ T | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ri ∈ C}, R = {ri ∈ R
= {ti ∈ T | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ri ∈
since U ⊆ U
(cid:2))

⇒ U
[8].
| (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ti ∈ T}, T
(cid:2)
C} and R
and R ⊆ R
(cid:2)
(cid:2)
, R

since U ⊆ U
(cid:2)
, T

and T ⊆ T

= {ri ∈ R | (ui, ti, ri) ∈ Y ∀ ui ∈ U , ∀ ti ∈ T
(cid:2)

(cid:2)
⇒ T ⊆ T
Then, (U , T , R)⊆ (U
According to (1), (2) and (3), h is a closure operator.

) ⇒ h(T ) ⊆ h(T

(cid:2)}.

[8].

(cid:2)}

(cid:2)

(cid:2)

(cid:2)

(cid:2)

(cid:2)

Like the dyadic case [10], the closure operator induces an equivalence relation on the
power set of elements, i.e., tri-sets in the folksonomy, portioning it into disjoint subsets
called equivalence classes that we introduce in the following :

Deﬁnition 5. (EQUIVALENCE CLASS) Let S1 = (A1, B1, C1), S2 = (A2, B2, C2) be
two tri-sets of F and T C ∈ T C. S1 and S2 belong to the same equivalence class
represented by the tri-concept T C, i.e., S1 ≡T C S2 iff h(S1) = h(S2) = T C.

The smallest tri-set (w.r.t. the number of items) in each equivalence class is called a
tri-minimal generator and is deﬁned as follows:

Scalable Mining of Frequent Tri-concepts from Folksonomies

237

Deﬁnition 6. (TRI-MINIMAL GENERATOR) Let g = (A, B, C) be a tri-set such as
A ⊆ U, B ⊆ T and C ⊆ R and T C ∈ T C. The triple g is a tri-minimal generator
(tri-generator for short) of T C iff h(g) = T C and (cid:2) g1 = (A1, B1, C1) such as :

1. A = A1,
2. (B1 ⊆ B ∧ C1 ⊂ C) ∨ (B1 ⊂ B ∧ C1 ⊆ C), and
3. h(g) = h(g1) = T C.

(u5,u6,u7)

(t4,t5)

(r1,r2,r3)

(u5,u6,u7)

(t4,t5)
(r1,r2)

(u5,u6,u7)

(t4,t5)
(r1)

The tri-concept

(u5,u6,u7)

(t4)

(r1,r2)

Non 
Tri-Generators

(u5,u6,u7)

(t4)

(r1,r2,r3)

(u5,u6,u7)

(t5)

(r1,r2)

(u5,u6,u7)

(u5,u6,u7)

(t4)
(r1)

(t5)
(r2)

Tri-Generators

Fig. 1. Example of an equivalence class from F

Figure 1 sketches a sample class of the induced equivalence relation from the folk-
sonomy depicted by table 1. The largest unsubsumed tri-set T C = {{u5, u6, u7}, {t4,
t5}, {r1, r2, r3}}, has three tri-generators g1, g2 and g3. However, g4 = {{u5, u6, u7},
{t4, t5}, r1} is not a tri-generator of T C since it exists g1 such as g1.extent=g4.extent,
(g1.intent = ⊆ g4.intent ∧ g1.modus ⊂ g4.modus).
4.2 Description of the TRICONS Algorithm

TRICONS operates in three steps as follows:

1. The extraction of tri-generators;
2. The computation of the modus part of tri-concepts;
3. The computation of the intent part of tri-concepts.

The pseudo code of the TRICONS algorithm is sketched by Algorithm 1. TRICONS
takes as input a folksonomy F = (U, T , R, Y) as well as three user-deﬁned thresholds
: minsuppu, minsuppt and minsuppr. The TRICONS algorithm outputs the set of all
frequent tri-concepts that fulﬁll these aforementioned thresholds. TRICONS operates as
follows : it starts by invoking the TRISORT procedure (Line 2), that sorts the folkson-
omy w.r.t. the ﬁelds r, t and u, respectively. This sorting facilitates the handling of the
folksonomy in order to extract the tri-generators. Then, TRICONS calls the FINDMIN-
IMALGENERATORS procedure (Step 1), which pseudo-code is given by Algorithm 2,
in order to extract the tri-generators which are stored in the set MG (Line 4) : for each
triple (u, t, r), FINDMINIMALGENERATORS computes the set Us which is the maximal
set of users (including u) sharing the tag t and the resource r (Algorithm 2, Line 4).

238

C. Trabelsi, N. Jelassi, and S. Ben Yahia

ALGORITHM 1: TRICONS

Data :
1. F: (U, T , R, Y) : A Folksonomy.
2. minsuppu, minsuppt, minsuppr : User-deﬁned thresholds.
Result : T C : {Frequent tri-concepts}.
1 begin
2

TRISORT(F );
/*Step 1 : The extraction of tri-generators*/
FINDMINIMALGENERATORS(F , MG, minsuppu);
/*Step 2 : The computation of the modus part*/
foreach tri-gen g ∈ MG do

Increase Set(MG, minsuppu, minsuppt, g, T S, true);

end
PRUNEINFREQUENTSETS(TS,minsuppt);
/*Step 3 : The computation of the intent part*/
foreach tri-set s ∈ T S do

Increase Set( T S, minsuppu, minsuppt, s, T C, false);

end
PRUNEINFREQUENTSETS(TC,minsuppr);

14
15 end
16 return T C ;

3

4

5

6

7

8

9

10

11

12

13

3

4

5

6

7

8

ALGORITHM 2: FINDMINIMALGENERATORS
Data :
1. MG : The set of frequent tri-generators;
2. F (U, T , R, Y) : A folksonomy;
3. minsuppu : User-deﬁned threshold of user’s support.
Result : MG : {The set of frequent tri-generators}.
1 begin
2

while (u, t, r) (cid:3)= N U LL do

(u, t, r):=NEXTTRIPLE(F);
Us= {ui ∈ U | (ui, t, r) ∈ Y} ;
if | Us | ≥ minsuppu then

g.extent = Us; g.intent = r; g.modus = t;
AddTri(MG, g)

end

end

9
10 end
11 return MG ;

Scalable Mining of Frequent Tri-concepts from Folksonomies

239

Algorithm 2 invokes both ADDTRI and NEXTTRIPLE functions. The ﬁrst one al-
lows to add the tri-set T ri to the set S, whereas the second one returns for each call the
next triple (u, t, r) of the folksonomy F.

ALGORITHM 3: Increase Set

Data :
1. SIN : The set of frequent tri-generators/tri-sets.
2. minu, mint : User-deﬁned thresholds of extent and modus support.
3. tri : A tri-generator/tri-set.
4. ﬂag : a boolean indicator.
Result : SOU T : {The set of frequent tri-sets/tri-concepts}.
1 begin
2

foreach tri-set tri

(cid:2) ∈ SIN do
(cid:2)
if ﬂag and tri.intent = tri

.intent and tri.extent ⊆ tri
(cid:2)

.extent then
s.intent = g.intent; s.extent = g.extent; s.modus = g.modus ∪
.modus; ADDTRI(SOU T , s);
(cid:2)
g

3

4

5

6

7

8

9

10

11

12

13

14

15

(cid:2)
.intent and tri and tri

are incomparables

end
(cid:2)
else if ﬂag and tri.intent = tri
then
.extent = g.extent ∩ g
(cid:2)
g
.intent = g.intent; If | g
g

(cid:2)(cid:2)
(cid:2)(cid:2)

(cid:2)(cid:2)

.modus = g.modus ∪ g

(cid:2)

.extent; g
.extent | ≥ minu then ADDTRI(MG, g
(cid:2)(cid:2)
end
else if not ﬂag and tri.extent ⊆ tri
(cid:2)
tri.intent (cid:3)= tri
(cid:2)

.modus and
T C.extent = s.extent; T C.modus = s.modus; T C.intent = s.intent ∪
.intent; ADDTRI(SOU T , T C);
(cid:2)
s

.extent and tri.modus ⊆ tri
(cid:2)

.modus;
(cid:2)(cid:2)
);

.intent then

end
(cid:2)
else if not ﬂag and tri and tri
.extent = s.extent ∩ s
(cid:2)
.intent = s.intent ∪ s
(cid:2)
(cid:2)(cid:2)

(cid:2)(cid:2)
s
(cid:2)(cid:2)
s
If | s

.extent | ≥ minu and | s

(cid:2)(cid:2)

are incomparables then
.extent; s
.intent;

.modus = s.modus ∩ s

.modus;
.modus | ≥ mint then ADDTRI(T S, s

(cid:2)(cid:2)

(cid:2)

(cid:2)(cid:2)

);

end

end

16
17 end
18 return SOU T ;

Afterwards, TRICONS invokes the Increase Set procedure (Step 2) for each tri-
generator of MG (Lines 6-8), which pseudo-code is given by Algorithm 3, in order to
compute the modus part of the tri-concepts. The two ﬁrst cases of Algorithm 3 (Lines
3 and 6) have to be considered by Increase Set according to the extent of each tri-
generator before returning the set T S of tri-sets. The boolean indicator ﬂag marked
by TRICONS shows whether the tri-set processed by the Increase Set procedure is a
tri-generator. Then, infrequent tri-sets, i.e., whose the modus part cardinality does not
fulﬁll the minimum threshold minsuppt are pruned (Line 9). In the third and ﬁnal step,
TRICONS invokes a second time the Increase Set procedure for each tri-set of T S
(Lines 11-13), in order to compute the intent part. Increase Set looks for tri-sets s
of
T S having a different intent part than a given tri-set s (Algorithm 3, Line 9). Before

(cid:2)

C. Trabelsi, N. Jelassi, and S. Ben Yahia

240
returning the set T C of tri-concepts, TRICONS prunes the infrequent ones, i.e., whose
the intent cardinality does not fulﬁll the minimum threshold minsuppr by invoking
the PRUNEINFREQUENTSETS procedure (Line 14). TRICONS comes to an end after
invoking this procedure and returns the set of the frequent tri-concepts which fulﬁlls the
three thresholds minsuppu, minsuppt and minsuppr.
Example 3. Considering the folksonomy depicted by Table 1 (page 4) with minsuppu
= 3, minsuppt = 3 and minsuppr = 2 yields the following track for the TRICONS algo-
rithm. The ﬁrst step of TRICONS consists in the extraction of (frequent) tri-generators
from the context (step 1) thanks to the FINDMINIMALGENERATORS procedure. Then,
invoking ﬁrstly the Increase Set procedure, on these tri-generators, allows the reduc-
tion of the number of candidates. Hence, only ﬁve candidates, at step 2, are generated
which directly lead to the frequent tri-concepts extracted by TRICONS. So, the set T S
contains the tri-sets {{u1, u2, u3, u5, u7}, {t2, t3, t4}, r1}, {{u1, u2, u3, u5, u7}, {t2,
t3, t4}, r2}, {{u1, u2, u3, u5, u7}, {t2, t3, t4}, r3}, {{u2, u3, u7}, {t1, t2, t3, t4}, r2}
and {{u2, u3, u7}, {t1, t2, t3, t4}, r3}. At this level, TRICONS generates a number of
candidates by far lower than its competitors, thanks to the generation of tri-generators.
The third and ﬁnal step, i.e., the second call to the Increase Set procedure, tends to
increase the intent part of each tri-set belonging to T S in order to extract frequent tri-
concepts. For example, the two latter tri-sets merge giving the tri-concept{{u2, u3, u7},
{t1, t2, t3, t4}, {r2, r3}} which is added to the set T C. Contrariwise to both CUBE-
MINER and TRIAS, the tri-concepts are extracted only once. The ﬁnal result set T C is
then returned by TRICONS which comes to an end with frequent tri-concepts that fulﬁll
the minimum thresholds mentioned above.

5 Experimental Results

In this section, we show through extensive carried out experiment the assessment of
the TRICONS5 performances vs. those of TRIAS and DATA-PEELER6, respectively.
We have applied our experiments on two real-world datasets. The ﬁrst dataset, i.e.,
DEL.ICIO.US, is considered to be dense, i.e., containing many long frequent tri-concepts
at various levels of minimum thresholds values, while the second is considered to be
sparse, i.e., containing a large number of tags but only a few of them frequently co-
occur in tri-concepts (on average, no more than 2 tags).
• DEL.ICIO.US: DENSE DATASET: The DEL.ICIO.US dataset used for our experiments
is around 10 MB in size (compressed) and it is freely downloadable7. The dense dataset
contains 48000 triples : 6822 users, 671 tags and 13102 resources.
• MOVIELENS: SPARSE DATASET: The MOVIELENS dataset used is around 13 MB
in size (compressed) and it is freely downloadable8. The sparse dataset contains 48000
triples : 33419 users, 18066 tags and 13397 resources.

5 The TRICONS algorithm is implemented in C++ (compiled with GCC 4.1.2) and we used an
Intel Core i7 CPU system with 6 GB RAM. Tests were carried out on the Linux operating
system UBUNTU 10.10.1.

6 Unfortunately, the code of the CUBEMINER algorithm is not available.
7 http://data.dai-labor.de/corpus/delicious/
8 http://www.grouplens.org

Scalable Mining of Frequent Tri-concepts from Folksonomies

241

Table 2. Performances TRICONS vs. those of TRIAS and DATA-PEELER (in seconds) above the
DEL.ICIO.US and MovieLens datasets

# Triples

Dataset TRICONS TRIAS
(Type)

Dataset TRICONS TRIAS
(Type)

5000
15000
25000 DEL.ICIO.US
35000
(Dense)
48000

DATA
PEELER
0, 51 638, 22
0, 91 1538, 15
5, 68 1937, 23 MovieLens
(Sparse)

0,05
0,55
3,31
11,73 17, 67 2318, 07
13,73 20, 67 2718, 07

DATA
PEELER
0, 14
43, 64
0,06
1, 50 1271, 49
0,53
3, 30 2010, 77
0,91
6, 34 2909,91
1,51
2,69 11, 52 3851, 38

Performances of TRICONS vs. TRIAS and DATA-PEELER: For mining frequent
tri-sets and frequent tri-concepts, we set minimum support values of minsuppu = 2,
minsuppt = 2 and minsuppr = 1, i.e., in a frequent tri-concept, at least, 2 users have
assigned the same tags (2 at least) to a same resource at least. Table 2 compares the
performances (in sec) of the three algorithms above for different values of the number
of triples over the mentioned datasets. With respect to the aforementioned minimum
support values, the number of the extracted tri-concepts from the DEL.ICIO.US dataset
is around 3877. Whereas 1088 tri-conepts are extracted from MovieLens dataset.
• TRICONS vs. TRIAS: For both datasets, the different tests highlight that TRICONS al-
ways shows better performances than do TRIAS. For exemple, TRICONS reaches almost
13, 73 sec when handling 48000 triples from DEL.ICIO.US, showing a drop in execu-
tion time of around 33, 57%, compared to TRIAS. Moreover, the obtained results, on the
both datasets, conﬁrm that this discrepancy between the two algorithms stills in favor
of TRICONS as far as the number of triples grows. Interestingly enough, for the sparse
dataset, i.e., MOVIELENS, we note, for all values of the number of triples, an average
reduction of TRICONS execution time reaching almost 69, 54% compared to TRIAS.
The performance differences between these mentioned algorithms can be explained by
the fact that TRIAS starts by storing the entire folksonomy into main memory before
extracting frequent tri-concepts. This memory greedy storage has the drawback to slow
the algorithm and alters its execution time as far as the number of triples becomes sig-
niﬁcant. Contrarily to TRICONS that ﬁrstly invokes the FINDMINIMALGENERATORS
procedure to extract the tri-generators which constitues the core of the tri-concepts. This
speciﬁc treatment of TRICONS reduces the memory greediness. Indeed, the number of
tri-generators are often by far below the total number of the triples in a folksonomy.
• TRICONS vs. DATA-PEELER: For both datasets and for all values of the number of
triples, DATA-PEELER algorithm is far away from TRICONS performances. Indeed, the
poor performance ﬂagged out by DATA-PEELER, is explained by the strategy adopted
by this later which starts by storing the entire folksonomy into a binary tree structure,
which should facilitate its run and then the extraction of tri-concepts. Indeed, such struc-
ture is absolutely not adequate to support a so highly sized data, which is the case of
the folksonomies considered in our evaluation. Furthermore, TRICONS is the only one
algorithm that does not store the dataset in memory before proceeding the extraction of
tri-concepts. In addition, TRICONS generates very few candidates thanks to the clever
use of tri-generators that reduce the search space signiﬁcantly. In contrast, TRIAS and

242

C. Trabelsi, N. Jelassi, and S. Ben Yahia

DATA-PEELER, in addition to store in memory the whole dataset, generate an impres-
sive number of candidates, most of which are stored in memory uselessly given the
small number of tri-extracted concepts.
• TRIAS vs. DATA-PEELER: Contrariwise to experimental results shown in [2], TRIAS
outperforms DATA-PEELER since the considered datasets are far away larger. We used
real-world datasets similar to those used in [6] which explains why TRIAS is better in
terms of performance than its competitor.

6 Conclusion and Future Work

In this paper, we introduced an extension of the notion of closure operator and tri-
generator in the folksonomy and we thoroughly studied their theoretical properties.
Based on these notions, we introduced the TRICONS algorithm, for a scalable min-
ing of tri-concepts, that heavily relies on the order ideal shape of the set of tri-minimal
generators. In nearly all experiments we performed, the obtained results showed that
TRICONS outperforms the pioneering algorithms of the literature; that is owe to the
non-injectivity property of the closure operator. Other avenues for future work mainly
address the extraction of other concise representations of frequent tri-sets. In this re-
spect, we will try to expand the steady effort carried within the diadic case towards
deﬁning concise representations, e.g., disjunction-free sets (closed) non-derivable sets,
(closed) essential itemsets, to cite but a few. It is a thriving issue, since these concise
representation have already shown interesting compactness rates [5].

References

1. Besson, J., Robardet, C., Boulicaut, J., Rome, S.: Constraint-based concept mining and its

application to microarray data analysis. Intelligent Data Analysis 9, 59–82 (2005)

2. Cerf, L., Besson, J., Robardet, C., Boulicaut, J.: Closed patterns meet n-ary relations. ACM

Transactions on Knowledge Discovery from Data 3, 1–36 (2009)

3. Couch, A.L., Chiarini, M.: A Theory of Closure Operators. In: Hausheer, D., Sch¨onw¨alder,

J. (eds.) AIMS 2008. LNCS, vol. 5127, pp. 162–174. Springer, Heidelberg (2008)

4. Ganter, B., Wille, R.: Formal Concept Analysis. Springer (1999)
5. Hamrouni, T., Yahia, S.B., Nguifo, E.M.: Sweeping the disjunctive search space towards
mining new exact concise representations of frequent itemsets. Data and Knowledge Engi-
neering 68(10), 1091–1111 (2009)

6. J¨aschke, R., Hotho, A., Schmitz, C., Ganter, B., Stumme, G.: Discovering shared conceptu-
alisations in folksonomies. Web Semantics: Science, Services and Agents on the World Wide
Web 6, 38–53 (2008)

7. Ji, L., Tan, K.L., Tung, A.K.H.: Mining frequent closed cubes in 3d datasets. In: Proceedings
of the 32nd International Conference on Very Large Data Bases, Seoul, Korea, pp. 811–822
(2006)

8. Lehmann, F., Wille, R.: A Triadic Approach to Formal Concept Analysis. In: Ellis, G., Rich,
W., Levinson, R., Sowa, J.F. (eds.) ICCS 1995. LNCS, vol. 954, pp. 32–43. Springer, Hei-
delberg (1995)

9. Mika, P.: Ontologies are us: A uniﬁed model of social networks and semantics. Web Seman-

tics: Science, Services and Agents on the World Wide Web 5(1), 5–15 (2007)

10. Zaki, M.J.: Closed itemset mining and non-redundant association rule mining. In: Liu, L.,

Ozsu, M.T. (eds.) Encyclopedia of Database Systems. Springer (2009)


