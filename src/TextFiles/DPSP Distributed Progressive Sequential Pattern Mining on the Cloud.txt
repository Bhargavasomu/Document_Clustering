DPSP: Distributed Progressive Sequential

Pattern Mining on the Cloud

Jen-Wei Huang1, Su-Chen Lin2, and Ming-Syan Chen2

1 Yuan Ze University, Taiwan
jwhuang@saturn.yzu.edu.tw

2 National Taiwan University, Taiwan

Abstract. The progressive sequential pattern mining problem has been
discussed in previous research works. With the increasing amount of
data, single processors struggle to scale up. Traditional algorithms run-
ning on a single machine may have scalability troubles. Therefore, mining
progressive sequential patterns intrinsically suﬀers from the scalability
problem. In view of this, we design a distributed mining algorithm to ad-
dress the scalability problem of mining progressive sequential patterns.
The proposed algorithm DPSP, standing for Distributed Progressive Se-
quential Pattern mining algorithm, is implemented on top of Hadoop
platform, which realizes the cloud computing environment. We propose
Map/Reduce jobs in DPSP to delete obsolete itemsets, update current
candidate sequential patterns and report up-to-date frequent sequential
patterns within each POI. The experimental results show that DPSP
possesses great scalability and consequently increases the performance
and the practicability of mining algorithms.

1 Introduction

Based on the earlier work [7], the sequential pattern mining problem [1] can
be categorized as three classes according to the management of correspond-
ing databases. They are static sequential pattern mining, incremental sequential
mining and progressive sequential pattern mining. It is noted that the progressive
sequential pattern mining is known as a general model of the sequential pattern
mining. The static and the incremental sequential pattern mining can be viewed
as special cases of the progressive sequential pattern mining. The progressive se-
quential pattern mining problem can be described as “Given an interesting time
period called period of interest (POI) and a minimum support threshold, ﬁnd the
complete set of frequent subsequences whose occurrence frequencies are greater
than or equal to the minimum support times the number of sequences having
elements in the current POI in a progressive sequence database.” In fact, mining
progressive sequential patterns intrinsically suﬀers from the scalability problem.
In this work, we propose a distributed data mining algorithm to address the
scalability problem of the progressive sequential pattern mining. The proposed
algorithm DPSP, which stands for Distributed Progressive Sequential Pattern
mining algorithm, is designed on top of Hadoop platform [6], which implements
Google’s Map/Reduce paradigm [5].

M.J. Zaki et al. (Eds.): PAKDD 2010, Part II, LNAI 6119, pp. 27–34, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010

28

J.-W. Huang, S.-C. Lin, and M.-S. Chen

We design two Map/Reduce jobs in DPSP. At each timestamp, the candi-
date computing job computes candidate sequential patterns of all sequences and
updates the summary of each sequence for the future computation. Then, us-
ing all candidate sequential patterns as the input data, the support assembling
job accumulates the occurrence frequencies of candidate sequential patterns in
the current POI and reports frequent sequential patterns to users. Finally, all
up-to-date frequent sequential patterns in the current POI are reported. DPSP
not only outputs frequent sequential patterns in the current POI but also stores
summaries of candidate sequential patterns at the current timestamp. As time
goes by, DPSP reads back summaries of all sequences and combine them with
newly arriving itemsets to form new candidate sequential patterns at the new
timestamp. Obsolete candidate sequential patterns are deleted at the same time.
DPSP is thus able to delete obsolete itemsets, update summaries of all sequences
and report up-to-date frequent sequential patterns. It is noted that DPSP does
not need to scan the whole database many times to gather occurrence frequencies
of candidate sequential patterns. DPSP, instead, reads newly arriving data and
the summary of each sequence once. In addition, DPSP utilizes cloud comput-
ing techniques. It is easy to scale out using Hadoop platform to deal with huge
amounts of data. The experimental results show that DPSP can ﬁnd progressive
sequential patterns eﬃciently and DPSP possesses great scalability. The dis-
tributed scheme not only improves the eﬃciency but also consequently increases
the practicability.

The rest of this work is organized as follows. We will derive some preliminaries
in Section 2. The proposed algorithm DPSP will be introduced in Section 3. Some
experiments to evaluate the performance will be shown in Section 4. Finally, the
conclusion is given in Section 5.

2 Related Works

After the ﬁrst work addressing the sequential pattern mining problem in [1],
many research works are proposed to solve the static sequential pattern min-
ing problem [2], and the incremental sequential pattern mining problem [10].
As for the progressive sequential pattern mining problem, new data arrive at
the database and obsolete data are deleted at the same time. In this model,
users can focus on the up-to-date database and ﬁnd frequent sequential patterns
without being inﬂuenced by obsolete data. To deal with a progressive database
eﬃciently, a progressive algorithm, Pisa, is proposed in [7]. However, traditional
algorithms running on a single processor struggle to scale up with huge amount
of data. In view of this, many researchers work on distributed and parallel data
mining algorithms [4] [3] [12] [9] [11] [8]. In recent days, many researchers and
corporations work on developing the cloud computing technology, which utilizes
clusters of machines to cope with huge amount of data. The platform allows
developers to focus on designing distributed algorithms whereas routine issues
like data allocation, job scheduling, load balancing, and failure recovery can be
inherently handled by the cloud computing framework. Hadoop [6] is an open

DPSP: Distributed Progressive Sequential Pattern Mining on the Cloud

29

(cid:724)(cid:767)(cid:762)(cid:770)(cid:773)(cid:764)(cid:775)(cid:763)(cid:768)(cid:691)(cid:727)(cid:739)(cid:742)(cid:739)
(cid:732)(cid:769)(cid:771)(cid:776)(cid:775)(cid:717) (cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:774)(cid:691)(cid:770)(cid:761)(cid:691)(cid:756)(cid:767)(cid:767)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:758)(cid:760)(cid:774)(cid:691)(cid:756)(cid:773)(cid:773)(cid:764)(cid:777)(cid:764)(cid:769)(cid:762)(cid:691)(cid:756)(cid:775)
(cid:775)(cid:763)(cid:760) (cid:758)(cid:776)(cid:773)(cid:773)(cid:760)(cid:769)(cid:775)(cid:691)(cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)
(cid:708)(cid:705)(cid:691)(cid:778)(cid:778)(cid:763)(cid:764)(cid:767)(cid:760)(cid:699)(cid:775)(cid:763)(cid:760)(cid:773)(cid:760) (cid:764)(cid:774) (cid:769)(cid:760)(cid:778)(cid:691)(cid:759)(cid:756)(cid:775)(cid:756)(cid:691)(cid:756)(cid:775)(cid:691)(cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)(cid:691)(cid:775)(cid:700)(cid:782)
(cid:709)(cid:705)(cid:691) (cid:726)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:726)(cid:770)(cid:768)(cid:771)(cid:776)(cid:775)(cid:764)(cid:769)(cid:762)(cid:733)(cid:770)(cid:757)(cid:718)
(cid:710)(cid:705)(cid:691) (cid:742)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:724)(cid:774)(cid:774)(cid:760)(cid:768)(cid:757)(cid:767)(cid:764)(cid:769)(cid:762)(cid:733)(cid:770)(cid:757)(cid:718)
(cid:711)(cid:705)(cid:691) (cid:775)(cid:691)(cid:720)(cid:691)(cid:775)(cid:691)(cid:702)(cid:691)(cid:708)(cid:718)
(cid:712)(cid:705)(cid:691) (cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:691)(cid:761)(cid:773)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:775)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:775)(cid:764)(cid:756)(cid:767)(cid:691)(cid:771)(cid:756)(cid:775)(cid:775)(cid:760)(cid:773)(cid:769)(cid:774)(cid:718)
(cid:713)(cid:705)(cid:691)(cid:784)(cid:760)(cid:760)(cid:769)(cid:759) (cid:778)(cid:763)(cid:764)(cid:767)(cid:760)
(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:717)(cid:691)(cid:761)(cid:773)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:775)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:775)(cid:764)(cid:756)(cid:767)(cid:691)(cid:771)(cid:756)(cid:775)(cid:775)(cid:760)(cid:773)(cid:769)(cid:774)(cid:691)(cid:756)(cid:775)(cid:691)(cid:760)(cid:756)(cid:758)(cid:763)(cid:691)
(cid:739)(cid:738)(cid:732) (cid:778)(cid:764)(cid:775)(cid:763) (cid:775)(cid:763)(cid:760)(cid:764)(cid:773) (cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:774)
(cid:728)(cid:769)(cid:759)

Start DPSP

inp ut data at time t

summaries at time t-1

CCMapper

CCMapper

CCMapper

Candidate
Calculating

Job

many <SeqNo, itemset> or

<SeqNo, itemset + timestamp> p airs

CCReducer

CCReducer

CCReducer

<candidate itemset, null>

summaries at time t

SAMapper

SAMapper

SAMapper

t=t+1

Support

Assembling

many <candidate, support> pairs

Job

SAReducer

SAReducer

SAReducer

<frequent sequential p atterns, support>

Fig. 1. Algorithm DPSP and system model

source project aiming at building a cloud infrastructure running on large clusters,
which implements Google’s Map/Reduce paradigm [5]. By means of the map
function, the application can be divided into several fractions. Each fraction
is assigned to a single node in large clusters and executed by the node. After
the execution, the reduce function merges these partial results to form the ﬁnal
output. As such, developers need only to design a series of Map/Reduce jobs to
split data and merge results.

3 Distributed Progressive Sequential Pattern Mining

We utilize Hadoop platform to design a distributed algorithm for the progressive
sequential pattern mining. The proposed algorithm is named as Distributed Pro-
gressive Sequential Pattern mining algorithm, abbreviated as DPSP. In essence,
DPSP consists of two Map/Reduce jobs, the candidate computing job and the
support assembling job. As shown in the left of Figure 1, for each timestamp, the
candidate computing job reads input data, which arrives at timestamp t, of all
sequences. Itemsets from diﬀerent sequences are distributed to diﬀerent nodes in
the cloud computing environment. Each node in the cloud computes candidate
sequential patterns of each sequence within the current POI. Meanwhile, the
candidate computing job also updates the summary for each sequence. Obsolete
data are deleted in the candidate computing job and the up-to-date candidate
sequential patterns are output. Then, support assembling job reads all candidate
sequential patterns as input data. Diﬀerent candidate sequential patterns are dis-
tributed to diﬀerent nodes. Each node accumulates the occurrence frequencies
of candidate sequential patterns and reports frequent sequential patterns whose
supports are no less than the minimum support threshold in the current POI

30

J.-W. Huang, S.-C. Lin, and M.-S. Chen

to users. When time goes to the next timestamp, DPSP keeps executing these
Map/Reduce jobs. As such, DPSP is able to report the most up-to-date frequent
sequential patterns in each POI.

The system model of DPSP is shown in right of Figure 1. The upper part is the
candidate computing job while the support assembling job is at the lower part.
In the candidate computing job, input data at timestamp t and the candidate
set summaries at timestamp t-1 are split and transferred to several CCMap-
pers. CCMapper generates many pairs of <sequence number, input itemset>.
Then, pairs with the same sequence number are sent to the same CCReducer.
CCReducer computes candidate sequential patterns of the given sequence and
outputs pairs of <candidate sequential patterns, null>. In addition, CCReducer
updates the summary of each sequence and deletes obsolete data at the same
time. Candidate set summaries at the current timestamp are output for the com-
putation at the next timestamp as well. Next, each SAMapper in the support
assembling job reads input data and accumulates local occurrence frequencies
for each candidate sequential patterns. SAMapper generates pairs of <candidate
sequential pattern, local supports of the candidate> as outputs. Then, the pairs
containing the same candidate sequential pattern are sent to the same SARe-
ducer. SAReducer aggregates supports of the same candidate sequential pattern
and outputs those frequent patterns in the current POI. After the computation
at the timestamp, t, DPSP moves to the next timestamp, t+1.

3.1 Candidate Computing Job

The objective of the candidate computing job is to compute all candidate se-
quential patterns from all sequences within the current POI as shown in Figure 2.
In CCMapper, itemsets of all sequences arriving at the current timestamp and
the candidate set summaries at the previous timestamp are used as input data.
As shown in lines 2 to 3 of CCMapper, if CCMapper reads the input from candi-
date set summaries, CCMapper generates <sequence number, candidate itemset
with the corresponding timestamp> pairs. On the other hand, if CCMapper
reads the input data from a sequence, CCMapper outputs <sequence number,
arriving itemset> pairs as shown in lines 4 to 5. These output pairs are dis-
tributed to CCReducers as their inputs. Pairs with the same key are sent to
the same CCReducer. By means of the summary at the previous timestamp and
the arriving itemset at the current timestamp, each CCReducer is able to gen-
erate candidate sequential patterns of each sequence in the current POI. In line
2 of CCReducer, the multiple output variable is used to output candidate set
summary at the current timestamp for the future computation. In lines 6 to 15,
CCReducer enumerates each value in the receiving pairs. If the value is a can-
didate set summary at the previous timestamp, CCReducer puts the candidate
into cand set. In lines 9 to 10, if the timestamp is bigger than the start time
of the current POI, which means this candidate will still be valid at the next
timestamp, CCReducer outputs the candidate in the summary of the current
timestamp for the computation at the next timestamp. In lines 11 to 12, if the
candidate contains more than 1 item, the candidate is put in the result set as

DPSP: Distributed Progressive Sequential Pattern Mining on the Cloud

31

(cid:726)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:774)(cid:726)(cid:770)(cid:768)(cid:771)(cid:776)(cid:775)(cid:764)(cid:769)(cid:762)(cid:733)(cid:770)(cid:757)(cid:717)

(cid:726)(cid:726)(cid:736)(cid:756)(cid:771)(cid:771)(cid:760)(cid:773)
(cid:764)(cid:769)(cid:771)(cid:776)(cid:775)(cid:717)(cid:691)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:774)(cid:691)(cid:770)(cid:761)(cid:691)(cid:756)(cid:767)(cid:767)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:758)(cid:760)(cid:774)(cid:691)(cid:756)(cid:773)(cid:773)(cid:764)(cid:777)(cid:764)(cid:769)(cid:762)(cid:691)(cid:756)(cid:775) (cid:775)(cid:763)(cid:760) (cid:758)(cid:776)(cid:773)(cid:773)(cid:760)(cid:769)(cid:775)
(cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771) (cid:738)(cid:741) (cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760) (cid:774)(cid:760)(cid:775) (cid:774)(cid:776)(cid:768)(cid:768)(cid:756)(cid:773)(cid:764)(cid:760)(cid:774) (cid:756)(cid:775) (cid:775)(cid:763)(cid:760) (cid:771)(cid:773)(cid:760)(cid:777)(cid:764)(cid:770)(cid:776)(cid:774)
(cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)
(cid:768)(cid:756)(cid:771)(cid:717)
(cid:708)(cid:705)(cid:691)(cid:777)(cid:756)(cid:773)(cid:691)(cid:759)(cid:756)(cid:775)(cid:756)(cid:691)(cid:720)(cid:691)(cid:773)(cid:760)(cid:756)(cid:759)(cid:691)(cid:764)(cid:769)(cid:771)(cid:776)(cid:775)(cid:691)(cid:759)(cid:756)(cid:775)(cid:756)(cid:718)
(cid:709)(cid:705) (cid:764)(cid:764)(cid:761)(cid:699)(cid:759)(cid:756)(cid:775)(cid:756)(cid:758)(cid:770)(cid:769)(cid:775)(cid:756)(cid:764)(cid:769)(cid:774) (cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)(cid:700)(cid:782) (cid:706)(cid:706) (cid:764)(cid:775) (cid:764)(cid:774) (cid:756) (cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)
(cid:710)(cid:705) (cid:770)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:691)(cid:719)(cid:759)(cid:756)(cid:775)(cid:756)(cid:705)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:758)(cid:760)(cid:737)(cid:770)(cid:703)(cid:691)(cid:759)(cid:756)(cid:775)(cid:756)(cid:705)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:702) (cid:759)(cid:756)(cid:775)(cid:756)(cid:705)(cid:775)(cid:764)(cid:768)(cid:760)(cid:721)(cid:718)
(cid:711)(cid:705) (cid:760)(cid:760)(cid:767)(cid:774)(cid:760) (cid:706)(cid:706) (cid:764)(cid:775) (cid:764)(cid:774) (cid:756)(cid:769) (cid:756)(cid:773)(cid:773)(cid:764)(cid:777)(cid:764)(cid:769)(cid:762) (cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)
(cid:712)(cid:705)(cid:691) (cid:770)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:691)(cid:719)(cid:759)(cid:756)(cid:775)(cid:756)(cid:705)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:758)(cid:760)(cid:737)(cid:770)(cid:703)(cid:691)(cid:759)(cid:756)(cid:775)(cid:756)(cid:705)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:721)(cid:718)

(cid:726)(cid:726)(cid:741)(cid:760)(cid:759)(cid:776)(cid:758)(cid:760)(cid:773)
(cid:758)(cid:770)(cid:769)(cid:761)(cid:764)(cid:762)(cid:776)(cid:773)(cid:760)(cid:717)
(cid:708)(cid:705)(cid:691)(cid:691)(cid:777)(cid:756)(cid:773)(cid:691)(cid:774)(cid:775)(cid:756)(cid:773)(cid:775)(cid:754)(cid:775)(cid:764)(cid:768)(cid:760)(cid:691)(cid:720)(cid:691)(cid:758)(cid:776)(cid:773)(cid:773)(cid:760)(cid:769)(cid:775)(cid:691)(cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)(cid:691)(cid:937)(cid:691)(cid:739)(cid:738)(cid:732)(cid:718)
(cid:709)(cid:705) (cid:777)(cid:756)(cid:773) (cid:768)(cid:770)(cid:705)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:719)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:758)(cid:760)(cid:737)(cid:770)(cid:703)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:702) (cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)(cid:721)(cid:718)

(cid:706)(cid:706) (cid:768)(cid:776)(cid:767)(cid:775)(cid:764)(cid:771)(cid:767)(cid:760) (cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775) (cid:775)(cid:770) (cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775) (cid:774)(cid:776)(cid:768)(cid:768)(cid:756)(cid:773)(cid:780)

(cid:764)(cid:764)(cid:761)(cid:699)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:764)(cid:774) (cid:756) (cid:774)(cid:776)(cid:768)(cid:768)(cid:756)(cid:773)(cid:780)(cid:700)(cid:782)

(cid:764)(cid:764)(cid:761)(cid:699)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:705)(cid:775)(cid:764)(cid:768)(cid:760)(cid:721)(cid:774)(cid:775)(cid:756)(cid:773)(cid:775)(cid:754)(cid:775)(cid:764)(cid:768)(cid:760)(cid:700)

(cid:706)(cid:706) (cid:776)(cid:774)(cid:760)(cid:759) (cid:775)(cid:770) (cid:774)(cid:775)(cid:770)(cid:773)(cid:760) (cid:764)(cid:769)(cid:771)(cid:776)(cid:775) (cid:759)(cid:756)(cid:775)(cid:756)

(cid:773)(cid:760)(cid:759)(cid:776)(cid:758)(cid:760)(cid:699)(cid:764)(cid:769)(cid:754)(cid:766)(cid:760)(cid:780)(cid:703) (cid:764)(cid:769)(cid:754)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:774)(cid:700)(cid:717)
(cid:710)(cid:705) (cid:777)(cid:756)(cid:773) (cid:764)(cid:769)(cid:771)(cid:776)(cid:775)(cid:718)
(cid:711)(cid:705)(cid:691)(cid:691)(cid:777)(cid:756)(cid:773)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:754)(cid:774)(cid:760)(cid:775)(cid:718)(cid:706)(cid:706)(cid:691)(cid:776)(cid:774)(cid:760)(cid:759) (cid:775)(cid:770) (cid:774)(cid:775)(cid:770)(cid:773)(cid:760)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:691)(cid:774)(cid:760)(cid:775) (cid:774)(cid:776)(cid:768)(cid:768)(cid:756)(cid:773)(cid:780) (cid:756)(cid:775)
(cid:775)(cid:763)(cid:760) (cid:771)(cid:773)(cid:760)(cid:777)(cid:764)(cid:770)(cid:776)(cid:774) (cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)
(cid:712)(cid:705) (cid:777)(cid:756)(cid:773) (cid:773)(cid:760)(cid:774)(cid:776)(cid:767)(cid:775)(cid:719)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:721)(cid:718) (cid:706)(cid:706) (cid:776)(cid:774)(cid:760)(cid:759) (cid:775)(cid:770) (cid:774)(cid:775)(cid:770)(cid:773)(cid:760) (cid:759)(cid:764)(cid:774)(cid:775)(cid:764)(cid:769)(cid:758)(cid:775) (cid:773)(cid:760)(cid:774)(cid:776)(cid:767)(cid:775)(cid:774)
(cid:713)(cid:705) (cid:761)(cid:761)(cid:770)(cid:773)(cid:699)(cid:760)(cid:756)(cid:758)(cid:763) (cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:764)(cid:769) (cid:764)(cid:769)(cid:754)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:774)(cid:700)(cid:782)
(cid:714)(cid:705)
(cid:715)(cid:705) (cid:758)(cid:756)(cid:769)(cid:759)(cid:754)(cid:774)(cid:760)(cid:775)(cid:705)(cid:771)(cid:776)(cid:775)(cid:699)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:705)(cid:775)(cid:764)(cid:768)(cid:760)(cid:703)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:705)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:700)(cid:718)
(cid:716)(cid:705)
(cid:708)(cid:707)(cid:705) (cid:768)(cid:770)(cid:705)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:719)(cid:764)(cid:769)(cid:754)(cid:766)(cid:760)(cid:780)(cid:703)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:702) (cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:705)(cid:775)(cid:764)(cid:768)(cid:760)(cid:721)(cid:718)
(cid:708)(cid:708)(cid:705)
(cid:708)(cid:709)(cid:705)
(cid:708)(cid:710)(cid:705) (cid:784)(cid:760)(cid:760)(cid:767)(cid:774)(cid:760) (cid:706)(cid:706) (cid:764)(cid:775) (cid:764)(cid:774) (cid:764)(cid:769)(cid:771)(cid:776)(cid:775) (cid:759)(cid:756)(cid:775)(cid:756)
(cid:708)(cid:711)(cid:705)(cid:691)(cid:691) (cid:764)(cid:769)(cid:771)(cid:776)(cid:775)(cid:720) (cid:762)(cid:760)(cid:775) (cid:775)(cid:763)(cid:760) (cid:770)(cid:769)(cid:767)(cid:780) (cid:770)(cid:769)(cid:760) (cid:759)(cid:756)(cid:775)(cid:756) (cid:756)(cid:775) (cid:758)(cid:776)(cid:773)(cid:773)(cid:760)(cid:769)(cid:775) (cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)(cid:718)
(cid:708)(cid:712)(cid:705)(cid:784)(cid:760)(cid:760)(cid:769)(cid:759) (cid:761)(cid:770)(cid:773)
(cid:708)(cid:713)(cid:705)(cid:761)(cid:761)(cid:770)(cid:773)(cid:699)(cid:760)(cid:756)(cid:758)(cid:763)(cid:691)(cid:758)(cid:770)(cid:768)(cid:757)(cid:764)(cid:769)(cid:756)(cid:775)(cid:764)(cid:770)(cid:769)(cid:691)(cid:770)(cid:761)(cid:691)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:691)(cid:764)(cid:769)(cid:691)(cid:764)(cid:769)(cid:771)(cid:776)(cid:775)(cid:705)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:700)(cid:782)
(cid:708)(cid:714)(cid:705)(cid:691) (cid:761)(cid:761)(cid:770)(cid:773)(cid:699)(cid:760)(cid:756)(cid:758)(cid:763)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:691)(cid:764)(cid:769)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:754)(cid:774)(cid:760)(cid:775)(cid:700)(cid:782)
(cid:708)(cid:715)(cid:705)(cid:691)(cid:691) (cid:691)(cid:777)(cid:756)(cid:773)(cid:691)(cid:769)(cid:760)(cid:778)(cid:754)(cid:758)(cid:756)(cid:769)(cid:759)(cid:691)(cid:720)(cid:691)(cid:756)(cid:771)(cid:771)(cid:760)(cid:769)(cid:759)(cid:691)(cid:758)(cid:770)(cid:768)(cid:757)(cid:764)(cid:769)(cid:756)(cid:775)(cid:764)(cid:770)(cid:769)(cid:691)(cid:775)(cid:770)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:718)

(cid:764)(cid:764)(cid:761)(cid:699)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:705)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:705)(cid:774)(cid:764)(cid:781)(cid:760)(cid:721)(cid:708)(cid:700)
(cid:773)(cid:760)(cid:774)(cid:776)(cid:767)(cid:775)(cid:705)(cid:771)(cid:776)(cid:775)(cid:699)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:705)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:700)(cid:718)

(cid:708)(cid:716)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:773)(cid:760)(cid:774)(cid:776)(cid:767)(cid:775)(cid:705)(cid:771)(cid:776)(cid:775)(cid:699)(cid:769)(cid:760)(cid:778)(cid:754)(cid:758)(cid:756)(cid:769)(cid:759)(cid:700)(cid:718)
(cid:709)(cid:707)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:764)(cid:764)(cid:761)(cid:699)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:705)(cid:775)(cid:764)(cid:768)(cid:760)(cid:691)(cid:721)(cid:691)(cid:774)(cid:775)(cid:756)(cid:773)(cid:775)(cid:754)(cid:775)(cid:764)(cid:768)(cid:760)(cid:700)
(cid:709)(cid:708)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:691)(cid:691)(cid:768)(cid:770)(cid:705)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:719)(cid:764)(cid:769)(cid:754)(cid:766)(cid:760)(cid:780)(cid:703)(cid:691)(cid:769)(cid:760)(cid:778)(cid:754)(cid:758)(cid:756)(cid:769)(cid:759)(cid:691)(cid:702)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:705)(cid:775)(cid:764)(cid:768)(cid:760)(cid:721)(cid:718)
(cid:709)(cid:709)(cid:705)(cid:691)(cid:691)(cid:784)(cid:760)(cid:760)(cid:769)(cid:759)(cid:691)(cid:761)(cid:770)(cid:773)
(cid:709)(cid:710)(cid:705)(cid:691)(cid:691)(cid:768)(cid:770)(cid:705)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:719)(cid:764)(cid:769)(cid:754)(cid:766)(cid:760)(cid:780)(cid:703)(cid:691)(cid:758)(cid:770)(cid:768)(cid:757)(cid:764)(cid:769)(cid:756)(cid:775)(cid:764)(cid:770)(cid:769)(cid:691)(cid:702) (cid:758)(cid:776)(cid:773)(cid:773)(cid:760)(cid:769)(cid:775)(cid:691)(cid:775)(cid:764)(cid:768)(cid:760)(cid:721)(cid:718)
(cid:709)(cid:711)(cid:705)(cid:784)(cid:760)(cid:760)(cid:769)(cid:759)(cid:691)(cid:761)(cid:770)(cid:773)
(cid:709)(cid:712)(cid:705)(cid:761)(cid:761)(cid:770)(cid:773)(cid:699)(cid:760)(cid:756)(cid:758)(cid:763)(cid:691)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:691)(cid:764)(cid:769)(cid:691)(cid:773)(cid:760)(cid:774)(cid:776)(cid:767)(cid:775)(cid:700)
(cid:709)(cid:713)(cid:705)(cid:691)(cid:691)(cid:770)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:719)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:703)(cid:691)(cid:769)(cid:776)(cid:767)(cid:767)(cid:721)(cid:718)
(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:717)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:758)(cid:760)(cid:691)(cid:769)(cid:776)(cid:768)(cid:757)(cid:760)(cid:773)(cid:691)(cid:756)(cid:769)(cid:759)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:775)(cid:764)(cid:756)(cid:767)(cid:691)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:774)(cid:691)
(cid:778)(cid:764)(cid:775)(cid:763)(cid:691)(cid:775)(cid:764)(cid:768)(cid:760)(cid:774)(cid:775)(cid:756)(cid:768)(cid:771)(cid:774)

(cid:742)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:774)(cid:724)(cid:774)(cid:774)(cid:760)(cid:768)(cid:757)(cid:767)(cid:764)(cid:769)(cid:762)(cid:733)(cid:770)(cid:757)(cid:717)

(cid:742)(cid:724)(cid:736)(cid:756)(cid:771)(cid:771)(cid:760)(cid:773)
(cid:764)(cid:769)(cid:771)(cid:776)(cid:775)(cid:717)(cid:691)(cid:758)(cid:756)(cid:769)(cid:759)(cid:764)(cid:759)(cid:756)(cid:775)(cid:760)(cid:691)(cid:774)(cid:760)(cid:776)(cid:772)(cid:760)(cid:769)(cid:775)(cid:764)(cid:756)(cid:767)(cid:691)(cid:771)(cid:756)(cid:775)(cid:775)(cid:760)(cid:773)(cid:769)(cid:774)(cid:691)(cid:770)(cid:761)(cid:691)(cid:756)(cid:767)(cid:767)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:758)(cid:760)(cid:774)
(cid:758)(cid:770)(cid:769)(cid:761)(cid:764)(cid:762)(cid:776)(cid:773)(cid:760)(cid:717)
(cid:708)(cid:705)(cid:691)(cid:691)(cid:777)(cid:756)(cid:773)(cid:691)(cid:767)(cid:770)(cid:758)(cid:756)(cid:767)(cid:736)(cid:756)(cid:771)(cid:719)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:703)(cid:691)(cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:721)(cid:718)
(cid:691)(cid:691)(cid:691)(cid:691)(cid:706)(cid:706)(cid:691)(cid:776)(cid:774)(cid:760)(cid:759)(cid:691)(cid:775)(cid:770)(cid:691)(cid:767)(cid:770)(cid:758)(cid:756)(cid:767)(cid:767)(cid:780)(cid:691)(cid:756)(cid:762)(cid:762)(cid:773)(cid:760)(cid:762)(cid:756)(cid:775)(cid:760)(cid:691)(cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:774)(cid:705)
(cid:768)(cid:756)(cid:771)(cid:717)
(cid:709)(cid:705)(cid:691)(cid:691)(cid:777)(cid:756)(cid:773)(cid:691)(cid:759)(cid:756)(cid:775)(cid:756)(cid:691)(cid:720)(cid:691)(cid:773)(cid:760)(cid:756)(cid:759)(cid:691)(cid:764)(cid:769)(cid:771)(cid:776)(cid:775)(cid:691)(cid:759)(cid:756)(cid:775)(cid:756)(cid:718)
(cid:710)(cid:705)(cid:691)(cid:691)(cid:764)(cid:764)(cid:761)(cid:699)(cid:759)(cid:756)(cid:775)(cid:756)(cid:705)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:691)(cid:764)(cid:774)(cid:691)(cid:764)(cid:769)(cid:691)(cid:767)(cid:770)(cid:758)(cid:756)(cid:767)(cid:736)(cid:756)(cid:771)(cid:700)
(cid:711)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:691)(cid:767)(cid:770)(cid:758)(cid:756)(cid:767)(cid:736)(cid:756)(cid:771)(cid:699)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:700)(cid:705)(cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:702)(cid:702)(cid:718)
(cid:712)(cid:705)(cid:691)(cid:691)(cid:760)(cid:760)(cid:767)(cid:774)(cid:760)
(cid:713)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:691)(cid:764)(cid:769)(cid:774)(cid:760)(cid:773)(cid:775)(cid:691)(cid:719)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:703)(cid:691)(cid:708)(cid:721)(cid:691)(cid:764)(cid:769)(cid:775)(cid:770)(cid:691)(cid:767)(cid:770)(cid:758)(cid:756)(cid:767)(cid:736)(cid:756)(cid:771)(cid:718)
(cid:758)(cid:767)(cid:770)(cid:774)(cid:760)(cid:717)
(cid:714)(cid:705)(cid:691)(cid:691)(cid:761)(cid:761)(cid:770)(cid:773)(cid:699)(cid:760)(cid:756)(cid:758)(cid:763)(cid:691)(cid:719)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:703)(cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:721) (cid:771)(cid:756)(cid:764)(cid:773)(cid:691)(cid:764)(cid:769)(cid:691)(cid:767)(cid:770)(cid:758)(cid:756)(cid:767)(cid:736)(cid:756)(cid:771)(cid:700)
(cid:715)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:770)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:691)(cid:719)(cid:764)(cid:775)(cid:760)(cid:768)(cid:774)(cid:760)(cid:775)(cid:703)(cid:691)(cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:721)(cid:718)

(cid:742)(cid:724)(cid:741)(cid:760)(cid:759)(cid:776)(cid:758)(cid:760)(cid:773)
(cid:773)(cid:760)(cid:759)(cid:776)(cid:758)(cid:760)(cid:699)(cid:764)(cid:769)(cid:754)(cid:766)(cid:760)(cid:780)(cid:703) (cid:764)(cid:769)(cid:754)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:774)(cid:700)(cid:717)
(cid:708)(cid:705)(cid:691)(cid:691)(cid:777)(cid:756)(cid:773)(cid:691)(cid:758)(cid:770)(cid:776)(cid:769)(cid:775)(cid:720)(cid:707)(cid:718)
(cid:709)(cid:705)(cid:691)(cid:691)(cid:761)(cid:761)(cid:770)(cid:773)(cid:699)(cid:760)(cid:756)(cid:758)(cid:763)(cid:691)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:691)(cid:764)(cid:769)(cid:691)(cid:764)(cid:769)(cid:754)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:774)(cid:700)
(cid:710)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:758)(cid:770)(cid:776)(cid:769)(cid:775)(cid:702)(cid:720)(cid:777)(cid:756)(cid:767)(cid:776)(cid:760)(cid:718)
(cid:711)(cid:705)(cid:691)(cid:691)(cid:764)(cid:764)(cid:761)(cid:699)(cid:758)(cid:770)(cid:776)(cid:769)(cid:775)(cid:721)(cid:720)(cid:768)(cid:764)(cid:769)(cid:764)(cid:768)(cid:776)(cid:768) (cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:700)
(cid:712)(cid:705)(cid:691)(cid:691)(cid:691)(cid:691)(cid:770)(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:719)(cid:764)(cid:769)(cid:754)(cid:766)(cid:760)(cid:780)(cid:703)(cid:691)(cid:758)(cid:770)(cid:776)(cid:769)(cid:775)(cid:721)(cid:718)
(cid:770)(cid:776)(cid:775)(cid:771)(cid:776)(cid:775)(cid:717)(cid:691)(cid:761)(cid:773)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:775)(cid:691)(cid:774)(cid:760)(cid:772)(cid:776)(cid:760)(cid:769)(cid:775)(cid:764)(cid:756)(cid:767)(cid:691)(cid:771)(cid:756)(cid:775)(cid:775)(cid:760)(cid:773)(cid:769)(cid:774)(cid:691)(cid:778)(cid:764)(cid:775)(cid:763)(cid:691)(cid:775)(cid:763)(cid:760)(cid:764)(cid:773) (cid:774)(cid:776)(cid:771)(cid:771)(cid:770)(cid:773)(cid:775)(cid:774)

Fig. 2. Candidates Computing Job and Supports Assembling Job

a candidate sequential pattern. In lines 13 to 14, if the value is the arriving
itemset of a sequence, CCReducer stores the input itemset for the generation of
new candidate itemsets in the following lines. It is noted that there is only one
newly arriving itemset of a speciﬁc sequence number at a timestamp.

CCReducer has to compute all combinations of items in the arriving itemset in
order to generate the complete set of diﬀerent sequential patterns. For example,
if the incoming itemset is (ABC), all combinations for generating candidate
sequential patterns are A, B, C, (AB), (AC), (BC), and (ABC). In lines 17 to
22, CCReducer ﬁrst appends each combination to each candidate itemset in the
cand set summary to form new candidate sequential patterns. Then, the newly
generated candidate sequential pattern is put into the result set as an output
in line 19. Meanwhile, if the timestamp of the candidate sequential pattern is
bigger than the start time of the current POI, the newly generated candidate
itemset is put in the summary of the current timestamp for further computation

32

J.-W. Huang, S.-C. Lin, and M.-S. Chen

at the next timestamp in lines 20 to 21. Note that the candidate itemsets whose
timestamps equal to the start time are not stored. In other words, the obsolete
data at the next timestamp are pruned away. In addition to the newly generated
candidates, CCReducer stores each combination with the current timestamp in
the summary at the current timestamp in line 23. The summary of the cur-
rent timestamp will be used to compute candidate sequential patterns at the
next timestamp. Finally, all candidate itemsets in the result set are output as
<candidate itemset, null> pairs in lines 25 to 26. After the collection of output
pairs of each CCReducer, the candidate computing job has dealt with all incom-
ing itemsets at the current timestamp, generated candidate sequential patterns
of all sequences in the current POI, and updated candidate set summaries of all
sequences for the computation at the next timestamp.

3.2 Support Assembling Job
As shown in Figure 2, the support assembling job calculate supports for each can-
didate sequential patterns. The support assembling job reads all candidate sequen-
tial patterns from the outputs of the candidate computing job. SAMapper utilizes
a local map to aggregate occurrence frequencies of diﬀerent candidate sequential
patterns locally in lines 2 to 6 and outputs <candidate sequential pattern, its local
supports> pairs in lines 7 to 8. Pairs with the same candidate sequential pattern
are sent to the same SAReducer. In lines 2 to 3 of SAReducer, SAReducer accumu-
lates supports of the same candidate sequential pattern again and gathers the ﬁnal
supports. For those candidate sequential patterns whose supports are no less than
the minimum support threshold, SAReducer reports them as frequent sequential
patterns in the current POI in lines 4 to 5. Then, DPSP algorithm moves to the
next timestamp and repeats these Map/Reduce jobs.

4 Performance Evaluation

4.1 Experimental Designs
To assess the performance of DPSP, we conduct several experiments to evaluate
the performance and the eﬀects of input parameters. DPSP is implemented in Java
and runs on top of Hadoop version 0.19.1. Hadoop cluster consists of 13 nodes and
each node contains 2 intel Xeon(TM) CPU 3.20GHz, 2GB RAM and 32GB SCSI
hard disk. The synthetic datasets are generated the same as [7]. In our experiments,
every point in the ﬁgures is the total execution time of 40 timestamps and the POI
is set as 10 timestamps unless speciﬁed otherwise. The minimum support threshold
is set to 0.02 and there are 10000 diﬀerent items in the synthetic datasets.

4.2 Experimental Results
First, we examine the performance of DPSP with large numbers of sequences
as shown in Figure 3. Note that both X-axis and Y-axis are in log scale in (a).
The total execution time does not vary a lot when the number of sequences is

DPSP: Distributed Progressive Sequential Pattern Mining on the Cloud

33

Fig. 3. Experiments

smaller than 500k. The reason is that most of the execution time comes from
the overhead of Hadoop scheme such as disk I/O and communication costs.
When the number of sequences is bigger than 500k, the total execution time
increases linearly. We show the linear part of Figure 3(a) in more details in
Figure 3(b). The linear equation of the regression line is y = 0.0005x + 1057.8,
which means DPSP possesses very good scalability. Therefore, DPSP shows great
practicability with large number of sequences. In the second experiment, we
demonstrate the eﬀect of increasing the length of POI. As shown in Figure 3(c),
the total execution time goes up very quickly. The reason is that the number of
candidate sequential patterns generated by each sequence grows exponentially
as the length of POI increases. Therefore, the processing time of DPSP increases
accordingly. The distributed nature of DPSP helps a little.

Finally, we show the advantages of the distributed scheme of our proposed al-
gorithm DPSP. The datasets contain 1000k to 10000k sequences. As shown in
Figure 3(d), the total execution time drops as the number of nodes increases from
1 to 8. This shows the merits of the distributed scheme. It is noted that both X-axis
and Y-axis are in log scale. However, the overheads of disk I/O and message com-
munication retard the reduction rate of the total execution time when the number
of nodes equals to 13. Nevertheless, the decrease of the total execution time is re-
markable. It is still worth to include more computing nodes in the cluster if we
want to deal with more sequences. By utilizing Hadoop platform, it is extremely
easy to extend the scale of the cluster to acquire better performance.

5 Conclusions

We proposed a distributed algorithm DPSP to address the inevitable scalability
problem of the progressive sequential pattern mining. DPSP is running on top

34

J.-W. Huang, S.-C. Lin, and M.-S. Chen

of Hadoop. We designed two Map/Reduce jobs in DPSP to eﬃciently compute
candidate sequential patterns, update summaries of sequences, and assemble
supports of candidate sequential patterns within each POI. As such, DPSP is
able to report the most up-to-date sequential patterns. The experimental results
show that DPSP possesses great scalability and thus increases practicability
when the number of sequences become larger. In addition, by utilizing Hadoop
platform, it is easy to increase the number of computing nodes in the cluster to
acquire better performance.

References

1. Agrawal, R., Srikant, R.: Mining sequential patterns. In: Proc. of Intl. Conf. on

Data Engineering, February 1995, pp. 3–14 (1995)

2. Aseervatham, S., Osmani, A., Viennet, E.: bitspade: A lattice-based sequential
pattern mining algorithm using bitmap representation. In: Proc. of Intl. Conf. on
Data Mining (2006)

3. Cheng, H., Tan, P.-N., Sticklen, J., Punch, W.F.: Recommendation via query cen-
tered random walk on k-partite graph. In: Proc. of Intl. Conf. on Data Mining,
pp. 457–462 (2007)

4. Chilson, J., Ng, R., Wagner, A., Zamar, R.: Parallel computation of high dimen-
sional robust correlation and covariance matrices. In: Proc. of Intl. Conf. on Knowl-
edge Discovery and Data Mining, August 2004, pp. 533–538 (2004)

5. Dean, J., Ghemawat, S.: Mapreduce: Simpliﬁed dataprocessing on large clusters.

In: Symp. on Operating System Design and Implementation (2004)

6. Hadoop, http://hadoop.apache.org
7. Huang, J.-W., Tseng, C.-Y., Ou, J.-C., Chen, M.-S.: A general model for sequential
pattern mining with a progressive database. IEEE Trans. on Knowledge and Data
Engineering 20(9), 1153–1167 (2008)

8. Kargupta, H., Das, K., Liu, K.: Multi-party, privacy-preserving distributed data
mining using a game theoretic framework. In: Proc. of European Conf. on Principles
and Practice of Knowledge Discovery in Databases, pp. 523–531 (2007)

9. Luo, P., Xiong, H., Lu, K., Shi, Z.: Distributed classiﬁcation in peer-to-peer
networks. In: Proc. of Intl. Conf. on Knowledge Discovery and Data Mining,
pp. 968–976 (2007)

10. Nguyen, S., Sun, X., Orlowska, M.: Improvements of incspan: Incremental mining
of sequential patterns in large database. In: Ho, T.-B., Cheung, D., Liu, H. (eds.)
PAKDD 2005. LNCS (LNAI), vol. 3518, pp. 442–451. Springer, Heidelberg (2005)
11. Wolﬀ, R., Bhaduri, K., Kargupta, H.: A generic local algorithm for mining data
streams in large distributed systems. IEEE Trans. on Knowledge and Data Engi-
neering 21(4), 465–478 (2009)

12. Xu, X., Yuruk, N., Feng, Z., Schweiger, T.A.J.: Scan: A structural clustering al-
gorithm for networks. In: Proc. of Intl. Conf. on Knowledge Discovery and Data
Mining, pp. 824–833 (2007)


